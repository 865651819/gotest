// Autogenerated by Thrift Compiler (0.9.2)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package transcoder

import (
	"bytes"
	"code.byted.org/gopkg/thrift"
	"code.byted.org/videoarch/transcoder/thrift_gen/base"
	"fmt"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var _ = base.GoUnusedProtection__
var GoUnusedProtection__ int

type ErrorCode int64

const (
	ErrorCode_OK                     ErrorCode = 0
	ErrorCode_InternalError          ErrorCode = 1
	ErrorCode_VideoStatusUploading   ErrorCode = 2
	ErrorCode_VideoStatusTranscoding ErrorCode = 3
	ErrorCode_VideoStatusTranscoded  ErrorCode = 4
	ErrorCode_InvalidProvider        ErrorCode = 5
	ErrorCode_InvalidVideoId         ErrorCode = 6
	ErrorCode_TranscoderNotEnabled   ErrorCode = 7
	ErrorCode_InvalidRequest         ErrorCode = 8
	ErrorCode_InvalidUserAction      ErrorCode = 9
)

func (p ErrorCode) String() string {
	switch p {
	case ErrorCode_OK:
		return "ErrorCode_OK"
	case ErrorCode_InternalError:
		return "ErrorCode_InternalError"
	case ErrorCode_VideoStatusUploading:
		return "ErrorCode_VideoStatusUploading"
	case ErrorCode_VideoStatusTranscoding:
		return "ErrorCode_VideoStatusTranscoding"
	case ErrorCode_VideoStatusTranscoded:
		return "ErrorCode_VideoStatusTranscoded"
	case ErrorCode_InvalidProvider:
		return "ErrorCode_InvalidProvider"
	case ErrorCode_InvalidVideoId:
		return "ErrorCode_InvalidVideoId"
	case ErrorCode_TranscoderNotEnabled:
		return "ErrorCode_TranscoderNotEnabled"
	case ErrorCode_InvalidRequest:
		return "ErrorCode_InvalidRequest"
	case ErrorCode_InvalidUserAction:
		return "ErrorCode_InvalidUserAction"
	}
	return "<UNSET>"
}

func ErrorCodeFromString(s string) (ErrorCode, error) {
	switch s {
	case "ErrorCode_OK":
		return ErrorCode_OK, nil
	case "ErrorCode_InternalError":
		return ErrorCode_InternalError, nil
	case "ErrorCode_VideoStatusUploading":
		return ErrorCode_VideoStatusUploading, nil
	case "ErrorCode_VideoStatusTranscoding":
		return ErrorCode_VideoStatusTranscoding, nil
	case "ErrorCode_VideoStatusTranscoded":
		return ErrorCode_VideoStatusTranscoded, nil
	case "ErrorCode_InvalidProvider":
		return ErrorCode_InvalidProvider, nil
	case "ErrorCode_InvalidVideoId":
		return ErrorCode_InvalidVideoId, nil
	case "ErrorCode_TranscoderNotEnabled":
		return ErrorCode_TranscoderNotEnabled, nil
	case "ErrorCode_InvalidRequest":
		return ErrorCode_InvalidRequest, nil
	case "ErrorCode_InvalidUserAction":
		return ErrorCode_InvalidUserAction, nil
	}
	return ErrorCode(0), fmt.Errorf("not a valid ErrorCode string")
}

func ErrorCodePtr(v ErrorCode) *ErrorCode { return &v }

type StartTranscodeRequest struct {
	VideoId       string            `thrift:"VideoId,1,required" json:"VideoId"`
	ProviderName  *string           `thrift:"ProviderName,2" json:"ProviderName"`
	Params        map[string]string `thrift:"Params,3" json:"Params"`
	ForceToDo     bool              `thrift:"ForceToDo,4" json:"ForceToDo"`
	UserReference *string           `thrift:"UserReference,5" json:"UserReference"`
	UserAction    *string           `thrift:"UserAction,6" json:"UserAction"`
	// unused fields # 7 to 254
	Base *base.Base `thrift:"Base,255" json:"Base"`
}

func NewStartTranscodeRequest() *StartTranscodeRequest {
	return &StartTranscodeRequest{}
}

func (p *StartTranscodeRequest) GetVideoId() string {
	return p.VideoId
}

var StartTranscodeRequest_ProviderName_DEFAULT string

func (p *StartTranscodeRequest) GetProviderName() string {
	if !p.IsSetProviderName() {
		return StartTranscodeRequest_ProviderName_DEFAULT
	}
	return *p.ProviderName
}

var StartTranscodeRequest_Params_DEFAULT map[string]string

func (p *StartTranscodeRequest) GetParams() map[string]string {
	return p.Params
}

var StartTranscodeRequest_ForceToDo_DEFAULT bool = false

func (p *StartTranscodeRequest) GetForceToDo() bool {
	return p.ForceToDo
}

var StartTranscodeRequest_UserReference_DEFAULT string

func (p *StartTranscodeRequest) GetUserReference() string {
	if !p.IsSetUserReference() {
		return StartTranscodeRequest_UserReference_DEFAULT
	}
	return *p.UserReference
}

var StartTranscodeRequest_UserAction_DEFAULT string

func (p *StartTranscodeRequest) GetUserAction() string {
	if !p.IsSetUserAction() {
		return StartTranscodeRequest_UserAction_DEFAULT
	}
	return *p.UserAction
}

var StartTranscodeRequest_Base_DEFAULT *base.Base

func (p *StartTranscodeRequest) GetBase() *base.Base {
	if !p.IsSetBase() {
		return StartTranscodeRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *StartTranscodeRequest) IsSetProviderName() bool {
	return p.ProviderName != nil
}

func (p *StartTranscodeRequest) IsSetParams() bool {
	return p.Params != nil
}

func (p *StartTranscodeRequest) IsSetForceToDo() bool {
	return p.ForceToDo != StartTranscodeRequest_ForceToDo_DEFAULT
}

func (p *StartTranscodeRequest) IsSetUserReference() bool {
	return p.UserReference != nil
}

func (p *StartTranscodeRequest) IsSetUserAction() bool {
	return p.UserAction != nil
}

func (p *StartTranscodeRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *StartTranscodeRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 255:
			if err := p.ReadField255(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *StartTranscodeRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.VideoId = v
	}
	return nil
}

func (p *StartTranscodeRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.ProviderName = &v
	}
	return nil
}

func (p *StartTranscodeRequest) ReadField3(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string]string, size)
	p.Params = tMap
	for i := 0; i < size; i++ {
		var _key0 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key0 = v
		}
		var _val1 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_val1 = v
		}
		p.Params[_key0] = _val1
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *StartTranscodeRequest) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.ForceToDo = v
	}
	return nil
}

func (p *StartTranscodeRequest) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.UserReference = &v
	}
	return nil
}

func (p *StartTranscodeRequest) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.UserAction = &v
	}
	return nil
}

func (p *StartTranscodeRequest) ReadField255(iprot thrift.TProtocol) error {
	p.Base = &base.Base{}
	if err := p.Base.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Base, err)
	}
	return nil
}

func (p *StartTranscodeRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("StartTranscodeRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField255(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *StartTranscodeRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("VideoId", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:VideoId: %s", p, err)
	}
	if err := oprot.WriteString(string(p.VideoId)); err != nil {
		return fmt.Errorf("%T.VideoId (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:VideoId: %s", p, err)
	}
	return err
}

func (p *StartTranscodeRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetProviderName() {
		if err := oprot.WriteFieldBegin("ProviderName", thrift.STRING, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:ProviderName: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.ProviderName)); err != nil {
			return fmt.Errorf("%T.ProviderName (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:ProviderName: %s", p, err)
		}
	}
	return err
}

func (p *StartTranscodeRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetParams() {
		if err := oprot.WriteFieldBegin("Params", thrift.MAP, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:Params: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Params)); err != nil {
			return fmt.Errorf("error writing map begin: %s", err)
		}
		for k, v := range p.Params {
			if err := oprot.WriteString(string(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:Params: %s", p, err)
		}
	}
	return err
}

func (p *StartTranscodeRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetForceToDo() {
		if err := oprot.WriteFieldBegin("ForceToDo", thrift.BOOL, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:ForceToDo: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.ForceToDo)); err != nil {
			return fmt.Errorf("%T.ForceToDo (4) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:ForceToDo: %s", p, err)
		}
	}
	return err
}

func (p *StartTranscodeRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserReference() {
		if err := oprot.WriteFieldBegin("UserReference", thrift.STRING, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:UserReference: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.UserReference)); err != nil {
			return fmt.Errorf("%T.UserReference (5) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:UserReference: %s", p, err)
		}
	}
	return err
}

func (p *StartTranscodeRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserAction() {
		if err := oprot.WriteFieldBegin("UserAction", thrift.STRING, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:UserAction: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.UserAction)); err != nil {
			return fmt.Errorf("%T.UserAction (6) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:UserAction: %s", p, err)
		}
	}
	return err
}

func (p *StartTranscodeRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
		return fmt.Errorf("%T write field begin error 255:Base: %s", p, err)
	}
	if err := p.Base.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Base, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 255:Base: %s", p, err)
	}
	return err
}

func (p *StartTranscodeRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StartTranscodeRequest(%+v)", *p)
}

type StartTranscodeResponse struct {
	// unused fields # 1 to 254
	BaseResp *base.BaseResp `thrift:"BaseResp,255" json:"BaseResp"`
}

func NewStartTranscodeResponse() *StartTranscodeResponse {
	return &StartTranscodeResponse{}
}

var StartTranscodeResponse_BaseResp_DEFAULT *base.BaseResp

func (p *StartTranscodeResponse) GetBaseResp() *base.BaseResp {
	if !p.IsSetBaseResp() {
		return StartTranscodeResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *StartTranscodeResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *StartTranscodeResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 255:
			if err := p.ReadField255(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *StartTranscodeResponse) ReadField255(iprot thrift.TProtocol) error {
	p.BaseResp = &base.BaseResp{}
	if err := p.BaseResp.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.BaseResp, err)
	}
	return nil
}

func (p *StartTranscodeResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("StartTranscodeResponse"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField255(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *StartTranscodeResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBaseResp() {
		if err := oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
			return fmt.Errorf("%T write field begin error 255:BaseResp: %s", p, err)
		}
		if err := p.BaseResp.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.BaseResp, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 255:BaseResp: %s", p, err)
		}
	}
	return err
}

func (p *StartTranscodeResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StartTranscodeResponse(%+v)", *p)
}

type StartTaskRequest struct {
	VideoId   string            `thrift:"VideoId,1,required" json:"VideoId"`
	TaskName  string            `thrift:"TaskName,2,required" json:"TaskName"`
	TaskInput map[string]string `thrift:"TaskInput,3" json:"TaskInput"`
	// unused fields # 4 to 254
	Base *base.Base `thrift:"Base,255" json:"Base"`
}

func NewStartTaskRequest() *StartTaskRequest {
	return &StartTaskRequest{}
}

func (p *StartTaskRequest) GetVideoId() string {
	return p.VideoId
}

func (p *StartTaskRequest) GetTaskName() string {
	return p.TaskName
}

var StartTaskRequest_TaskInput_DEFAULT map[string]string

func (p *StartTaskRequest) GetTaskInput() map[string]string {
	return p.TaskInput
}

var StartTaskRequest_Base_DEFAULT *base.Base

func (p *StartTaskRequest) GetBase() *base.Base {
	if !p.IsSetBase() {
		return StartTaskRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *StartTaskRequest) IsSetTaskInput() bool {
	return p.TaskInput != nil
}

func (p *StartTaskRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *StartTaskRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 255:
			if err := p.ReadField255(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *StartTaskRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.VideoId = v
	}
	return nil
}

func (p *StartTaskRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.TaskName = v
	}
	return nil
}

func (p *StartTaskRequest) ReadField3(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string]string, size)
	p.TaskInput = tMap
	for i := 0; i < size; i++ {
		var _key2 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key2 = v
		}
		var _val3 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_val3 = v
		}
		p.TaskInput[_key2] = _val3
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *StartTaskRequest) ReadField255(iprot thrift.TProtocol) error {
	p.Base = &base.Base{}
	if err := p.Base.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Base, err)
	}
	return nil
}

func (p *StartTaskRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("StartTaskRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField255(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *StartTaskRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("VideoId", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:VideoId: %s", p, err)
	}
	if err := oprot.WriteString(string(p.VideoId)); err != nil {
		return fmt.Errorf("%T.VideoId (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:VideoId: %s", p, err)
	}
	return err
}

func (p *StartTaskRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("TaskName", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:TaskName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TaskName)); err != nil {
		return fmt.Errorf("%T.TaskName (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:TaskName: %s", p, err)
	}
	return err
}

func (p *StartTaskRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetTaskInput() {
		if err := oprot.WriteFieldBegin("TaskInput", thrift.MAP, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:TaskInput: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.TaskInput)); err != nil {
			return fmt.Errorf("error writing map begin: %s", err)
		}
		for k, v := range p.TaskInput {
			if err := oprot.WriteString(string(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:TaskInput: %s", p, err)
		}
	}
	return err
}

func (p *StartTaskRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
		return fmt.Errorf("%T write field begin error 255:Base: %s", p, err)
	}
	if err := p.Base.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Base, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 255:Base: %s", p, err)
	}
	return err
}

func (p *StartTaskRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StartTaskRequest(%+v)", *p)
}

type StartTaskResponse struct {
	TaskId string `thrift:"TaskId,1" json:"TaskId"`
	// unused fields # 2 to 254
	BaseResp *base.BaseResp `thrift:"BaseResp,255" json:"BaseResp"`
}

func NewStartTaskResponse() *StartTaskResponse {
	return &StartTaskResponse{}
}

func (p *StartTaskResponse) GetTaskId() string {
	return p.TaskId
}

var StartTaskResponse_BaseResp_DEFAULT *base.BaseResp

func (p *StartTaskResponse) GetBaseResp() *base.BaseResp {
	if !p.IsSetBaseResp() {
		return StartTaskResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *StartTaskResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *StartTaskResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 255:
			if err := p.ReadField255(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *StartTaskResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.TaskId = v
	}
	return nil
}

func (p *StartTaskResponse) ReadField255(iprot thrift.TProtocol) error {
	p.BaseResp = &base.BaseResp{}
	if err := p.BaseResp.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.BaseResp, err)
	}
	return nil
}

func (p *StartTaskResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("StartTaskResponse"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField255(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *StartTaskResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("TaskId", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:TaskId: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TaskId)); err != nil {
		return fmt.Errorf("%T.TaskId (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:TaskId: %s", p, err)
	}
	return err
}

func (p *StartTaskResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBaseResp() {
		if err := oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
			return fmt.Errorf("%T write field begin error 255:BaseResp: %s", p, err)
		}
		if err := p.BaseResp.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.BaseResp, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 255:BaseResp: %s", p, err)
		}
	}
	return err
}

func (p *StartTaskResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StartTaskResponse(%+v)", *p)
}
