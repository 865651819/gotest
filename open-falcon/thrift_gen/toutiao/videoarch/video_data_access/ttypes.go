// Autogenerated by Thrift Compiler (0.9.2)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package video_data_access

import (
	"bytes"
	"code.byted.org/gopkg/thrift"
	"code.byted.org/videoarch/transcoder/thrift_gen/base"
	"code.byted.org/videoarch/transcoder/thrift_gen/videoarch_common"
	"fmt"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var _ = base.GoUnusedProtection__
var _ = videoarch_common.GoUnusedProtection__
var GoUnusedProtection__ int

type CreateUploadRecordRequest struct {
	UploadRecord *videoarch_common.UploadRecord `thrift:"UploadRecord,1" json:"UploadRecord"`
	// unused fields # 2 to 254
	Base *base.Base `thrift:"Base,255" json:"Base"`
}

func NewCreateUploadRecordRequest() *CreateUploadRecordRequest {
	return &CreateUploadRecordRequest{}
}

var CreateUploadRecordRequest_UploadRecord_DEFAULT *videoarch_common.UploadRecord

func (p *CreateUploadRecordRequest) GetUploadRecord() *videoarch_common.UploadRecord {
	if !p.IsSetUploadRecord() {
		return CreateUploadRecordRequest_UploadRecord_DEFAULT
	}
	return p.UploadRecord
}

var CreateUploadRecordRequest_Base_DEFAULT *base.Base

func (p *CreateUploadRecordRequest) GetBase() *base.Base {
	if !p.IsSetBase() {
		return CreateUploadRecordRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *CreateUploadRecordRequest) IsSetUploadRecord() bool {
	return p.UploadRecord != nil
}

func (p *CreateUploadRecordRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *CreateUploadRecordRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 255:
			if err := p.ReadField255(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CreateUploadRecordRequest) ReadField1(iprot thrift.TProtocol) error {
	p.UploadRecord = &videoarch_common.UploadRecord{}
	if err := p.UploadRecord.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.UploadRecord, err)
	}
	return nil
}

func (p *CreateUploadRecordRequest) ReadField255(iprot thrift.TProtocol) error {
	p.Base = &base.Base{}
	if err := p.Base.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Base, err)
	}
	return nil
}

func (p *CreateUploadRecordRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("CreateUploadRecordRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField255(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *CreateUploadRecordRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("UploadRecord", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:UploadRecord: %s", p, err)
	}
	if err := p.UploadRecord.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.UploadRecord, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:UploadRecord: %s", p, err)
	}
	return err
}

func (p *CreateUploadRecordRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
		return fmt.Errorf("%T write field begin error 255:Base: %s", p, err)
	}
	if err := p.Base.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Base, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 255:Base: %s", p, err)
	}
	return err
}

func (p *CreateUploadRecordRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateUploadRecordRequest(%+v)", *p)
}

type CreateUploadRecordResponse struct {
	// unused fields # 1 to 254
	BaseResp *base.BaseResp `thrift:"BaseResp,255" json:"BaseResp"`
}

func NewCreateUploadRecordResponse() *CreateUploadRecordResponse {
	return &CreateUploadRecordResponse{}
}

var CreateUploadRecordResponse_BaseResp_DEFAULT *base.BaseResp

func (p *CreateUploadRecordResponse) GetBaseResp() *base.BaseResp {
	if !p.IsSetBaseResp() {
		return CreateUploadRecordResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *CreateUploadRecordResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *CreateUploadRecordResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 255:
			if err := p.ReadField255(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CreateUploadRecordResponse) ReadField255(iprot thrift.TProtocol) error {
	p.BaseResp = &base.BaseResp{}
	if err := p.BaseResp.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.BaseResp, err)
	}
	return nil
}

func (p *CreateUploadRecordResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("CreateUploadRecordResponse"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField255(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *CreateUploadRecordResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		return fmt.Errorf("%T write field begin error 255:BaseResp: %s", p, err)
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.BaseResp, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 255:BaseResp: %s", p, err)
	}
	return err
}

func (p *CreateUploadRecordResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateUploadRecordResponse(%+v)", *p)
}

type UpdateUploadRecordRequest struct {
	UploadRecord *videoarch_common.UploadRecord `thrift:"UploadRecord,1" json:"UploadRecord"`
	// unused fields # 2 to 254
	Base *base.Base `thrift:"Base,255" json:"Base"`
}

func NewUpdateUploadRecordRequest() *UpdateUploadRecordRequest {
	return &UpdateUploadRecordRequest{}
}

var UpdateUploadRecordRequest_UploadRecord_DEFAULT *videoarch_common.UploadRecord

func (p *UpdateUploadRecordRequest) GetUploadRecord() *videoarch_common.UploadRecord {
	if !p.IsSetUploadRecord() {
		return UpdateUploadRecordRequest_UploadRecord_DEFAULT
	}
	return p.UploadRecord
}

var UpdateUploadRecordRequest_Base_DEFAULT *base.Base

func (p *UpdateUploadRecordRequest) GetBase() *base.Base {
	if !p.IsSetBase() {
		return UpdateUploadRecordRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *UpdateUploadRecordRequest) IsSetUploadRecord() bool {
	return p.UploadRecord != nil
}

func (p *UpdateUploadRecordRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *UpdateUploadRecordRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 255:
			if err := p.ReadField255(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *UpdateUploadRecordRequest) ReadField1(iprot thrift.TProtocol) error {
	p.UploadRecord = &videoarch_common.UploadRecord{}
	if err := p.UploadRecord.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.UploadRecord, err)
	}
	return nil
}

func (p *UpdateUploadRecordRequest) ReadField255(iprot thrift.TProtocol) error {
	p.Base = &base.Base{}
	if err := p.Base.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Base, err)
	}
	return nil
}

func (p *UpdateUploadRecordRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UpdateUploadRecordRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField255(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *UpdateUploadRecordRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("UploadRecord", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:UploadRecord: %s", p, err)
	}
	if err := p.UploadRecord.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.UploadRecord, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:UploadRecord: %s", p, err)
	}
	return err
}

func (p *UpdateUploadRecordRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
		return fmt.Errorf("%T write field begin error 255:Base: %s", p, err)
	}
	if err := p.Base.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Base, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 255:Base: %s", p, err)
	}
	return err
}

func (p *UpdateUploadRecordRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateUploadRecordRequest(%+v)", *p)
}

type UpdateUploadRecordResponse struct {
	// unused fields # 1 to 254
	BaseResp *base.BaseResp `thrift:"BaseResp,255" json:"BaseResp"`
}

func NewUpdateUploadRecordResponse() *UpdateUploadRecordResponse {
	return &UpdateUploadRecordResponse{}
}

var UpdateUploadRecordResponse_BaseResp_DEFAULT *base.BaseResp

func (p *UpdateUploadRecordResponse) GetBaseResp() *base.BaseResp {
	if !p.IsSetBaseResp() {
		return UpdateUploadRecordResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *UpdateUploadRecordResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *UpdateUploadRecordResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 255:
			if err := p.ReadField255(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *UpdateUploadRecordResponse) ReadField255(iprot thrift.TProtocol) error {
	p.BaseResp = &base.BaseResp{}
	if err := p.BaseResp.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.BaseResp, err)
	}
	return nil
}

func (p *UpdateUploadRecordResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UpdateUploadRecordResponse"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField255(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *UpdateUploadRecordResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		return fmt.Errorf("%T write field begin error 255:BaseResp: %s", p, err)
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.BaseResp, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 255:BaseResp: %s", p, err)
	}
	return err
}

func (p *UpdateUploadRecordResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateUploadRecordResponse(%+v)", *p)
}

type CreateVideoInfoRequest struct {
	VideoID   string                            `thrift:"VideoID,1" json:"VideoID"`
	VideoInfo *videoarch_common.VideoCommonInfo `thrift:"VideoInfo,2" json:"VideoInfo"`
	// unused fields # 3 to 254
	Base *base.Base `thrift:"Base,255" json:"Base"`
}

func NewCreateVideoInfoRequest() *CreateVideoInfoRequest {
	return &CreateVideoInfoRequest{}
}

func (p *CreateVideoInfoRequest) GetVideoID() string {
	return p.VideoID
}

var CreateVideoInfoRequest_VideoInfo_DEFAULT *videoarch_common.VideoCommonInfo

func (p *CreateVideoInfoRequest) GetVideoInfo() *videoarch_common.VideoCommonInfo {
	if !p.IsSetVideoInfo() {
		return CreateVideoInfoRequest_VideoInfo_DEFAULT
	}
	return p.VideoInfo
}

var CreateVideoInfoRequest_Base_DEFAULT *base.Base

func (p *CreateVideoInfoRequest) GetBase() *base.Base {
	if !p.IsSetBase() {
		return CreateVideoInfoRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *CreateVideoInfoRequest) IsSetVideoInfo() bool {
	return p.VideoInfo != nil
}

func (p *CreateVideoInfoRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *CreateVideoInfoRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 255:
			if err := p.ReadField255(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CreateVideoInfoRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.VideoID = v
	}
	return nil
}

func (p *CreateVideoInfoRequest) ReadField2(iprot thrift.TProtocol) error {
	p.VideoInfo = &videoarch_common.VideoCommonInfo{}
	if err := p.VideoInfo.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.VideoInfo, err)
	}
	return nil
}

func (p *CreateVideoInfoRequest) ReadField255(iprot thrift.TProtocol) error {
	p.Base = &base.Base{}
	if err := p.Base.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Base, err)
	}
	return nil
}

func (p *CreateVideoInfoRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("CreateVideoInfoRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField255(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *CreateVideoInfoRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("VideoID", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:VideoID: %s", p, err)
	}
	if err := oprot.WriteString(string(p.VideoID)); err != nil {
		return fmt.Errorf("%T.VideoID (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:VideoID: %s", p, err)
	}
	return err
}

func (p *CreateVideoInfoRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("VideoInfo", thrift.STRUCT, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:VideoInfo: %s", p, err)
	}
	if err := p.VideoInfo.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.VideoInfo, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:VideoInfo: %s", p, err)
	}
	return err
}

func (p *CreateVideoInfoRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
		return fmt.Errorf("%T write field begin error 255:Base: %s", p, err)
	}
	if err := p.Base.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Base, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 255:Base: %s", p, err)
	}
	return err
}

func (p *CreateVideoInfoRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateVideoInfoRequest(%+v)", *p)
}

type CreateVideoInfoResponse struct {
	ID int64 `thrift:"ID,1" json:"ID"`
	// unused fields # 2 to 254
	BaseResp *base.BaseResp `thrift:"BaseResp,255" json:"BaseResp"`
}

func NewCreateVideoInfoResponse() *CreateVideoInfoResponse {
	return &CreateVideoInfoResponse{}
}

func (p *CreateVideoInfoResponse) GetID() int64 {
	return p.ID
}

var CreateVideoInfoResponse_BaseResp_DEFAULT *base.BaseResp

func (p *CreateVideoInfoResponse) GetBaseResp() *base.BaseResp {
	if !p.IsSetBaseResp() {
		return CreateVideoInfoResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *CreateVideoInfoResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *CreateVideoInfoResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 255:
			if err := p.ReadField255(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CreateVideoInfoResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *CreateVideoInfoResponse) ReadField255(iprot thrift.TProtocol) error {
	p.BaseResp = &base.BaseResp{}
	if err := p.BaseResp.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.BaseResp, err)
	}
	return nil
}

func (p *CreateVideoInfoResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("CreateVideoInfoResponse"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField255(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *CreateVideoInfoResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ID", thrift.I64, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:ID: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.ID)); err != nil {
		return fmt.Errorf("%T.ID (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:ID: %s", p, err)
	}
	return err
}

func (p *CreateVideoInfoResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		return fmt.Errorf("%T write field begin error 255:BaseResp: %s", p, err)
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.BaseResp, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 255:BaseResp: %s", p, err)
	}
	return err
}

func (p *CreateVideoInfoResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateVideoInfoResponse(%+v)", *p)
}

type UpdateVideoInfoRequest struct {
	VideoID   string                            `thrift:"VideoID,1" json:"VideoID"`
	VideoInfo *videoarch_common.VideoCommonInfo `thrift:"VideoInfo,2" json:"VideoInfo"`
	// unused fields # 3 to 254
	Base *base.Base `thrift:"Base,255" json:"Base"`
}

func NewUpdateVideoInfoRequest() *UpdateVideoInfoRequest {
	return &UpdateVideoInfoRequest{}
}

func (p *UpdateVideoInfoRequest) GetVideoID() string {
	return p.VideoID
}

var UpdateVideoInfoRequest_VideoInfo_DEFAULT *videoarch_common.VideoCommonInfo

func (p *UpdateVideoInfoRequest) GetVideoInfo() *videoarch_common.VideoCommonInfo {
	if !p.IsSetVideoInfo() {
		return UpdateVideoInfoRequest_VideoInfo_DEFAULT
	}
	return p.VideoInfo
}

var UpdateVideoInfoRequest_Base_DEFAULT *base.Base

func (p *UpdateVideoInfoRequest) GetBase() *base.Base {
	if !p.IsSetBase() {
		return UpdateVideoInfoRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *UpdateVideoInfoRequest) IsSetVideoInfo() bool {
	return p.VideoInfo != nil
}

func (p *UpdateVideoInfoRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *UpdateVideoInfoRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 255:
			if err := p.ReadField255(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *UpdateVideoInfoRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.VideoID = v
	}
	return nil
}

func (p *UpdateVideoInfoRequest) ReadField2(iprot thrift.TProtocol) error {
	p.VideoInfo = &videoarch_common.VideoCommonInfo{}
	if err := p.VideoInfo.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.VideoInfo, err)
	}
	return nil
}

func (p *UpdateVideoInfoRequest) ReadField255(iprot thrift.TProtocol) error {
	p.Base = &base.Base{}
	if err := p.Base.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Base, err)
	}
	return nil
}

func (p *UpdateVideoInfoRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UpdateVideoInfoRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField255(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *UpdateVideoInfoRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("VideoID", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:VideoID: %s", p, err)
	}
	if err := oprot.WriteString(string(p.VideoID)); err != nil {
		return fmt.Errorf("%T.VideoID (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:VideoID: %s", p, err)
	}
	return err
}

func (p *UpdateVideoInfoRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("VideoInfo", thrift.STRUCT, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:VideoInfo: %s", p, err)
	}
	if err := p.VideoInfo.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.VideoInfo, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:VideoInfo: %s", p, err)
	}
	return err
}

func (p *UpdateVideoInfoRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
		return fmt.Errorf("%T write field begin error 255:Base: %s", p, err)
	}
	if err := p.Base.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Base, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 255:Base: %s", p, err)
	}
	return err
}

func (p *UpdateVideoInfoRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateVideoInfoRequest(%+v)", *p)
}

type UpdateVideoInfoResponse struct {
	// unused fields # 1 to 254
	BaseResp *base.BaseResp `thrift:"BaseResp,255" json:"BaseResp"`
}

func NewUpdateVideoInfoResponse() *UpdateVideoInfoResponse {
	return &UpdateVideoInfoResponse{}
}

var UpdateVideoInfoResponse_BaseResp_DEFAULT *base.BaseResp

func (p *UpdateVideoInfoResponse) GetBaseResp() *base.BaseResp {
	if !p.IsSetBaseResp() {
		return UpdateVideoInfoResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *UpdateVideoInfoResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *UpdateVideoInfoResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 255:
			if err := p.ReadField255(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *UpdateVideoInfoResponse) ReadField255(iprot thrift.TProtocol) error {
	p.BaseResp = &base.BaseResp{}
	if err := p.BaseResp.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.BaseResp, err)
	}
	return nil
}

func (p *UpdateVideoInfoResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UpdateVideoInfoResponse"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField255(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *UpdateVideoInfoResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		return fmt.Errorf("%T write field begin error 255:BaseResp: %s", p, err)
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.BaseResp, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 255:BaseResp: %s", p, err)
	}
	return err
}

func (p *UpdateVideoInfoResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateVideoInfoResponse(%+v)", *p)
}

type CreateEncodedVideoInfoRequest struct {
	EncodedVideoInfos []*videoarch_common.EncodedVideoInfo `thrift:"EncodedVideoInfos,1" json:"EncodedVideoInfos"`
	// unused fields # 2 to 254
	Base *base.Base `thrift:"Base,255" json:"Base"`
}

func NewCreateEncodedVideoInfoRequest() *CreateEncodedVideoInfoRequest {
	return &CreateEncodedVideoInfoRequest{}
}

func (p *CreateEncodedVideoInfoRequest) GetEncodedVideoInfos() []*videoarch_common.EncodedVideoInfo {
	return p.EncodedVideoInfos
}

var CreateEncodedVideoInfoRequest_Base_DEFAULT *base.Base

func (p *CreateEncodedVideoInfoRequest) GetBase() *base.Base {
	if !p.IsSetBase() {
		return CreateEncodedVideoInfoRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *CreateEncodedVideoInfoRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *CreateEncodedVideoInfoRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 255:
			if err := p.ReadField255(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CreateEncodedVideoInfoRequest) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*videoarch_common.EncodedVideoInfo, 0, size)
	p.EncodedVideoInfos = tSlice
	for i := 0; i < size; i++ {
		_elem0 := &videoarch_common.EncodedVideoInfo{}
		if err := _elem0.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem0, err)
		}
		p.EncodedVideoInfos = append(p.EncodedVideoInfos, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *CreateEncodedVideoInfoRequest) ReadField255(iprot thrift.TProtocol) error {
	p.Base = &base.Base{}
	if err := p.Base.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Base, err)
	}
	return nil
}

func (p *CreateEncodedVideoInfoRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("CreateEncodedVideoInfoRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField255(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *CreateEncodedVideoInfoRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("EncodedVideoInfos", thrift.LIST, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:EncodedVideoInfos: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.EncodedVideoInfos)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.EncodedVideoInfos {
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:EncodedVideoInfos: %s", p, err)
	}
	return err
}

func (p *CreateEncodedVideoInfoRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
		return fmt.Errorf("%T write field begin error 255:Base: %s", p, err)
	}
	if err := p.Base.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Base, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 255:Base: %s", p, err)
	}
	return err
}

func (p *CreateEncodedVideoInfoRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateEncodedVideoInfoRequest(%+v)", *p)
}

type CreateEncodedVideoInfoResponse struct {
	// unused fields # 1 to 254
	BaseResp *base.BaseResp `thrift:"BaseResp,255" json:"BaseResp"`
}

func NewCreateEncodedVideoInfoResponse() *CreateEncodedVideoInfoResponse {
	return &CreateEncodedVideoInfoResponse{}
}

var CreateEncodedVideoInfoResponse_BaseResp_DEFAULT *base.BaseResp

func (p *CreateEncodedVideoInfoResponse) GetBaseResp() *base.BaseResp {
	if !p.IsSetBaseResp() {
		return CreateEncodedVideoInfoResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *CreateEncodedVideoInfoResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *CreateEncodedVideoInfoResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 255:
			if err := p.ReadField255(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CreateEncodedVideoInfoResponse) ReadField255(iprot thrift.TProtocol) error {
	p.BaseResp = &base.BaseResp{}
	if err := p.BaseResp.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.BaseResp, err)
	}
	return nil
}

func (p *CreateEncodedVideoInfoResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("CreateEncodedVideoInfoResponse"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField255(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *CreateEncodedVideoInfoResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		return fmt.Errorf("%T write field begin error 255:BaseResp: %s", p, err)
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.BaseResp, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 255:BaseResp: %s", p, err)
	}
	return err
}

func (p *CreateEncodedVideoInfoResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateEncodedVideoInfoResponse(%+v)", *p)
}

type VideoGroupInfo struct {
	Provider              string                               `thrift:"Provider,1" json:"Provider"`
	VideoStatus           string                               `thrift:"VideoStatus,2" json:"VideoStatus"`
	UserReference         string                               `thrift:"UserReference,3" json:"UserReference"`
	UserAction            string                               `thrift:"UserAction,4" json:"UserAction"`
	OriginalVideoInfo     *videoarch_common.VideoCommonInfo    `thrift:"OriginalVideoInfo,5" json:"OriginalVideoInfo"`
	EncodedVideoInfos     []*videoarch_common.EncodedVideoInfo `thrift:"EncodedVideoInfos,6" json:"EncodedVideoInfos"`
	Extra                 map[string]string                    `thrift:"Extra,7" json:"Extra"`
	Posters               []*videoarch_common.PosterCandidate  `thrift:"Posters,8" json:"Posters"`
	ProviderID            int64                                `thrift:"ProviderID,9" json:"ProviderID"`
	VideoStatusID         videoarch_common.VideoStatus         `thrift:"VideoStatusID,10" json:"VideoStatusID"`
	UserActionID          videoarch_common.UserAction          `thrift:"UserActionID,11" json:"UserActionID"`
	UploadInfo            *string                              `thrift:"UploadInfo,12" json:"UploadInfo"`
	LogoEncodedVideoInfos []*videoarch_common.EncodedVideoInfo `thrift:"LogoEncodedVideoInfos,13" json:"LogoEncodedVideoInfos"`
}

func NewVideoGroupInfo() *VideoGroupInfo {
	return &VideoGroupInfo{}
}

func (p *VideoGroupInfo) GetProvider() string {
	return p.Provider
}

func (p *VideoGroupInfo) GetVideoStatus() string {
	return p.VideoStatus
}

func (p *VideoGroupInfo) GetUserReference() string {
	return p.UserReference
}

func (p *VideoGroupInfo) GetUserAction() string {
	return p.UserAction
}

var VideoGroupInfo_OriginalVideoInfo_DEFAULT *videoarch_common.VideoCommonInfo

func (p *VideoGroupInfo) GetOriginalVideoInfo() *videoarch_common.VideoCommonInfo {
	if !p.IsSetOriginalVideoInfo() {
		return VideoGroupInfo_OriginalVideoInfo_DEFAULT
	}
	return p.OriginalVideoInfo
}

var VideoGroupInfo_EncodedVideoInfos_DEFAULT []*videoarch_common.EncodedVideoInfo

func (p *VideoGroupInfo) GetEncodedVideoInfos() []*videoarch_common.EncodedVideoInfo {
	return p.EncodedVideoInfos
}

var VideoGroupInfo_Extra_DEFAULT map[string]string

func (p *VideoGroupInfo) GetExtra() map[string]string {
	return p.Extra
}

var VideoGroupInfo_Posters_DEFAULT []*videoarch_common.PosterCandidate

func (p *VideoGroupInfo) GetPosters() []*videoarch_common.PosterCandidate {
	return p.Posters
}

func (p *VideoGroupInfo) GetProviderID() int64 {
	return p.ProviderID
}

func (p *VideoGroupInfo) GetVideoStatusID() videoarch_common.VideoStatus {
	return p.VideoStatusID
}

func (p *VideoGroupInfo) GetUserActionID() videoarch_common.UserAction {
	return p.UserActionID
}

var VideoGroupInfo_UploadInfo_DEFAULT string

func (p *VideoGroupInfo) GetUploadInfo() string {
	if !p.IsSetUploadInfo() {
		return VideoGroupInfo_UploadInfo_DEFAULT
	}
	return *p.UploadInfo
}

var VideoGroupInfo_LogoEncodedVideoInfos_DEFAULT []*videoarch_common.EncodedVideoInfo

func (p *VideoGroupInfo) GetLogoEncodedVideoInfos() []*videoarch_common.EncodedVideoInfo {
	return p.LogoEncodedVideoInfos
}
func (p *VideoGroupInfo) IsSetOriginalVideoInfo() bool {
	return p.OriginalVideoInfo != nil
}

func (p *VideoGroupInfo) IsSetEncodedVideoInfos() bool {
	return p.EncodedVideoInfos != nil
}

func (p *VideoGroupInfo) IsSetExtra() bool {
	return p.Extra != nil
}

func (p *VideoGroupInfo) IsSetPosters() bool {
	return p.Posters != nil
}

func (p *VideoGroupInfo) IsSetUploadInfo() bool {
	return p.UploadInfo != nil
}

func (p *VideoGroupInfo) IsSetLogoEncodedVideoInfos() bool {
	return p.LogoEncodedVideoInfos != nil
}

func (p *VideoGroupInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.ReadField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.ReadField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.ReadField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.ReadField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.ReadField13(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *VideoGroupInfo) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Provider = v
	}
	return nil
}

func (p *VideoGroupInfo) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.VideoStatus = v
	}
	return nil
}

func (p *VideoGroupInfo) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.UserReference = v
	}
	return nil
}

func (p *VideoGroupInfo) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.UserAction = v
	}
	return nil
}

func (p *VideoGroupInfo) ReadField5(iprot thrift.TProtocol) error {
	p.OriginalVideoInfo = &videoarch_common.VideoCommonInfo{}
	if err := p.OriginalVideoInfo.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.OriginalVideoInfo, err)
	}
	return nil
}

func (p *VideoGroupInfo) ReadField6(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*videoarch_common.EncodedVideoInfo, 0, size)
	p.EncodedVideoInfos = tSlice
	for i := 0; i < size; i++ {
		_elem1 := &videoarch_common.EncodedVideoInfo{}
		if err := _elem1.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem1, err)
		}
		p.EncodedVideoInfos = append(p.EncodedVideoInfos, _elem1)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *VideoGroupInfo) ReadField7(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string]string, size)
	p.Extra = tMap
	for i := 0; i < size; i++ {
		var _key2 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key2 = v
		}
		var _val3 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_val3 = v
		}
		p.Extra[_key2] = _val3
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *VideoGroupInfo) ReadField8(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*videoarch_common.PosterCandidate, 0, size)
	p.Posters = tSlice
	for i := 0; i < size; i++ {
		_elem4 := &videoarch_common.PosterCandidate{}
		if err := _elem4.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem4, err)
		}
		p.Posters = append(p.Posters, _elem4)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *VideoGroupInfo) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 9: %s", err)
	} else {
		p.ProviderID = v
	}
	return nil
}

func (p *VideoGroupInfo) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 10: %s", err)
	} else {
		temp := videoarch_common.VideoStatus(v)
		p.VideoStatusID = temp
	}
	return nil
}

func (p *VideoGroupInfo) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 11: %s", err)
	} else {
		temp := videoarch_common.UserAction(v)
		p.UserActionID = temp
	}
	return nil
}

func (p *VideoGroupInfo) ReadField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 12: %s", err)
	} else {
		p.UploadInfo = &v
	}
	return nil
}

func (p *VideoGroupInfo) ReadField13(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*videoarch_common.EncodedVideoInfo, 0, size)
	p.LogoEncodedVideoInfos = tSlice
	for i := 0; i < size; i++ {
		_elem5 := &videoarch_common.EncodedVideoInfo{}
		if err := _elem5.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem5, err)
		}
		p.LogoEncodedVideoInfos = append(p.LogoEncodedVideoInfos, _elem5)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *VideoGroupInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("VideoGroupInfo"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField13(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *VideoGroupInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Provider", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:Provider: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Provider)); err != nil {
		return fmt.Errorf("%T.Provider (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:Provider: %s", p, err)
	}
	return err
}

func (p *VideoGroupInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("VideoStatus", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:VideoStatus: %s", p, err)
	}
	if err := oprot.WriteString(string(p.VideoStatus)); err != nil {
		return fmt.Errorf("%T.VideoStatus (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:VideoStatus: %s", p, err)
	}
	return err
}

func (p *VideoGroupInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("UserReference", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:UserReference: %s", p, err)
	}
	if err := oprot.WriteString(string(p.UserReference)); err != nil {
		return fmt.Errorf("%T.UserReference (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:UserReference: %s", p, err)
	}
	return err
}

func (p *VideoGroupInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("UserAction", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:UserAction: %s", p, err)
	}
	if err := oprot.WriteString(string(p.UserAction)); err != nil {
		return fmt.Errorf("%T.UserAction (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:UserAction: %s", p, err)
	}
	return err
}

func (p *VideoGroupInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetOriginalVideoInfo() {
		if err := oprot.WriteFieldBegin("OriginalVideoInfo", thrift.STRUCT, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:OriginalVideoInfo: %s", p, err)
		}
		if err := p.OriginalVideoInfo.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.OriginalVideoInfo, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:OriginalVideoInfo: %s", p, err)
		}
	}
	return err
}

func (p *VideoGroupInfo) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetEncodedVideoInfos() {
		if err := oprot.WriteFieldBegin("EncodedVideoInfos", thrift.LIST, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:EncodedVideoInfos: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.EncodedVideoInfos)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.EncodedVideoInfos {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:EncodedVideoInfos: %s", p, err)
		}
	}
	return err
}

func (p *VideoGroupInfo) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetExtra() {
		if err := oprot.WriteFieldBegin("Extra", thrift.MAP, 7); err != nil {
			return fmt.Errorf("%T write field begin error 7:Extra: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
			return fmt.Errorf("error writing map begin: %s", err)
		}
		for k, v := range p.Extra {
			if err := oprot.WriteString(string(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 7:Extra: %s", p, err)
		}
	}
	return err
}

func (p *VideoGroupInfo) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetPosters() {
		if err := oprot.WriteFieldBegin("Posters", thrift.LIST, 8); err != nil {
			return fmt.Errorf("%T write field begin error 8:Posters: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Posters)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.Posters {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 8:Posters: %s", p, err)
		}
	}
	return err
}

func (p *VideoGroupInfo) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ProviderID", thrift.I64, 9); err != nil {
		return fmt.Errorf("%T write field begin error 9:ProviderID: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.ProviderID)); err != nil {
		return fmt.Errorf("%T.ProviderID (9) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 9:ProviderID: %s", p, err)
	}
	return err
}

func (p *VideoGroupInfo) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("VideoStatusID", thrift.I32, 10); err != nil {
		return fmt.Errorf("%T write field begin error 10:VideoStatusID: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.VideoStatusID)); err != nil {
		return fmt.Errorf("%T.VideoStatusID (10) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 10:VideoStatusID: %s", p, err)
	}
	return err
}

func (p *VideoGroupInfo) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("UserActionID", thrift.I32, 11); err != nil {
		return fmt.Errorf("%T write field begin error 11:UserActionID: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.UserActionID)); err != nil {
		return fmt.Errorf("%T.UserActionID (11) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 11:UserActionID: %s", p, err)
	}
	return err
}

func (p *VideoGroupInfo) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetUploadInfo() {
		if err := oprot.WriteFieldBegin("UploadInfo", thrift.STRING, 12); err != nil {
			return fmt.Errorf("%T write field begin error 12:UploadInfo: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.UploadInfo)); err != nil {
			return fmt.Errorf("%T.UploadInfo (12) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 12:UploadInfo: %s", p, err)
		}
	}
	return err
}

func (p *VideoGroupInfo) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetLogoEncodedVideoInfos() {
		if err := oprot.WriteFieldBegin("LogoEncodedVideoInfos", thrift.LIST, 13); err != nil {
			return fmt.Errorf("%T write field begin error 13:LogoEncodedVideoInfos: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.LogoEncodedVideoInfos)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.LogoEncodedVideoInfos {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 13:LogoEncodedVideoInfos: %s", p, err)
		}
	}
	return err
}

func (p *VideoGroupInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoGroupInfo(%+v)", *p)
}

type MGetVideoInfoRequest struct {
	VIDs                     []string `thrift:"VIDs,1" json:"VIDs"`
	NeedVideoFileInfo        bool     `thrift:"NeedVideoFileInfo,2" json:"NeedVideoFileInfo"`
	NeedEncodedVideoInfo     bool     `thrift:"NeedEncodedVideoInfo,3" json:"NeedEncodedVideoInfo"`
	NeedPosterCandidates     bool     `thrift:"NeedPosterCandidates,4" json:"NeedPosterCandidates"`
	NeedLogoEncodedVideoInfo bool     `thrift:"NeedLogoEncodedVideoInfo,5" json:"NeedLogoEncodedVideoInfo"`
	// unused fields # 6 to 254
	Base *base.Base `thrift:"Base,255" json:"Base"`
}

func NewMGetVideoInfoRequest() *MGetVideoInfoRequest {
	return &MGetVideoInfoRequest{
		NeedVideoFileInfo: true,

		NeedEncodedVideoInfo: true,
	}
}

func (p *MGetVideoInfoRequest) GetVIDs() []string {
	return p.VIDs
}

var MGetVideoInfoRequest_NeedVideoFileInfo_DEFAULT bool = true

func (p *MGetVideoInfoRequest) GetNeedVideoFileInfo() bool {
	return p.NeedVideoFileInfo
}

var MGetVideoInfoRequest_NeedEncodedVideoInfo_DEFAULT bool = true

func (p *MGetVideoInfoRequest) GetNeedEncodedVideoInfo() bool {
	return p.NeedEncodedVideoInfo
}

var MGetVideoInfoRequest_NeedPosterCandidates_DEFAULT bool = false

func (p *MGetVideoInfoRequest) GetNeedPosterCandidates() bool {
	return p.NeedPosterCandidates
}

var MGetVideoInfoRequest_NeedLogoEncodedVideoInfo_DEFAULT bool = false

func (p *MGetVideoInfoRequest) GetNeedLogoEncodedVideoInfo() bool {
	return p.NeedLogoEncodedVideoInfo
}

var MGetVideoInfoRequest_Base_DEFAULT *base.Base

func (p *MGetVideoInfoRequest) GetBase() *base.Base {
	if !p.IsSetBase() {
		return MGetVideoInfoRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *MGetVideoInfoRequest) IsSetNeedVideoFileInfo() bool {
	return p.NeedVideoFileInfo != MGetVideoInfoRequest_NeedVideoFileInfo_DEFAULT
}

func (p *MGetVideoInfoRequest) IsSetNeedEncodedVideoInfo() bool {
	return p.NeedEncodedVideoInfo != MGetVideoInfoRequest_NeedEncodedVideoInfo_DEFAULT
}

func (p *MGetVideoInfoRequest) IsSetNeedPosterCandidates() bool {
	return p.NeedPosterCandidates != MGetVideoInfoRequest_NeedPosterCandidates_DEFAULT
}

func (p *MGetVideoInfoRequest) IsSetNeedLogoEncodedVideoInfo() bool {
	return p.NeedLogoEncodedVideoInfo != MGetVideoInfoRequest_NeedLogoEncodedVideoInfo_DEFAULT
}

func (p *MGetVideoInfoRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *MGetVideoInfoRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 255:
			if err := p.ReadField255(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *MGetVideoInfoRequest) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.VIDs = tSlice
	for i := 0; i < size; i++ {
		var _elem6 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem6 = v
		}
		p.VIDs = append(p.VIDs, _elem6)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *MGetVideoInfoRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.NeedVideoFileInfo = v
	}
	return nil
}

func (p *MGetVideoInfoRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.NeedEncodedVideoInfo = v
	}
	return nil
}

func (p *MGetVideoInfoRequest) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.NeedPosterCandidates = v
	}
	return nil
}

func (p *MGetVideoInfoRequest) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.NeedLogoEncodedVideoInfo = v
	}
	return nil
}

func (p *MGetVideoInfoRequest) ReadField255(iprot thrift.TProtocol) error {
	p.Base = &base.Base{}
	if err := p.Base.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Base, err)
	}
	return nil
}

func (p *MGetVideoInfoRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("MGetVideoInfoRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField255(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *MGetVideoInfoRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("VIDs", thrift.LIST, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:VIDs: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.VIDs)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.VIDs {
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:VIDs: %s", p, err)
	}
	return err
}

func (p *MGetVideoInfoRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetNeedVideoFileInfo() {
		if err := oprot.WriteFieldBegin("NeedVideoFileInfo", thrift.BOOL, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:NeedVideoFileInfo: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.NeedVideoFileInfo)); err != nil {
			return fmt.Errorf("%T.NeedVideoFileInfo (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:NeedVideoFileInfo: %s", p, err)
		}
	}
	return err
}

func (p *MGetVideoInfoRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetNeedEncodedVideoInfo() {
		if err := oprot.WriteFieldBegin("NeedEncodedVideoInfo", thrift.BOOL, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:NeedEncodedVideoInfo: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.NeedEncodedVideoInfo)); err != nil {
			return fmt.Errorf("%T.NeedEncodedVideoInfo (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:NeedEncodedVideoInfo: %s", p, err)
		}
	}
	return err
}

func (p *MGetVideoInfoRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetNeedPosterCandidates() {
		if err := oprot.WriteFieldBegin("NeedPosterCandidates", thrift.BOOL, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:NeedPosterCandidates: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.NeedPosterCandidates)); err != nil {
			return fmt.Errorf("%T.NeedPosterCandidates (4) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:NeedPosterCandidates: %s", p, err)
		}
	}
	return err
}

func (p *MGetVideoInfoRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetNeedLogoEncodedVideoInfo() {
		if err := oprot.WriteFieldBegin("NeedLogoEncodedVideoInfo", thrift.BOOL, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:NeedLogoEncodedVideoInfo: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.NeedLogoEncodedVideoInfo)); err != nil {
			return fmt.Errorf("%T.NeedLogoEncodedVideoInfo (5) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:NeedLogoEncodedVideoInfo: %s", p, err)
		}
	}
	return err
}

func (p *MGetVideoInfoRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
		return fmt.Errorf("%T write field begin error 255:Base: %s", p, err)
	}
	if err := p.Base.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Base, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 255:Base: %s", p, err)
	}
	return err
}

func (p *MGetVideoInfoRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MGetVideoInfoRequest(%+v)", *p)
}

type MGetVideoInfoResponse struct {
	VideoInfos map[string]*VideoGroupInfo `thrift:"VideoInfos,1" json:"VideoInfos"`
	// unused fields # 2 to 254
	BaseResp *base.BaseResp `thrift:"BaseResp,255" json:"BaseResp"`
}

func NewMGetVideoInfoResponse() *MGetVideoInfoResponse {
	return &MGetVideoInfoResponse{}
}

func (p *MGetVideoInfoResponse) GetVideoInfos() map[string]*VideoGroupInfo {
	return p.VideoInfos
}

var MGetVideoInfoResponse_BaseResp_DEFAULT *base.BaseResp

func (p *MGetVideoInfoResponse) GetBaseResp() *base.BaseResp {
	if !p.IsSetBaseResp() {
		return MGetVideoInfoResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *MGetVideoInfoResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *MGetVideoInfoResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 255:
			if err := p.ReadField255(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *MGetVideoInfoResponse) ReadField1(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string]*VideoGroupInfo, size)
	p.VideoInfos = tMap
	for i := 0; i < size; i++ {
		var _key7 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key7 = v
		}
		_val8 := &VideoGroupInfo{}
		if err := _val8.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _val8, err)
		}
		p.VideoInfos[_key7] = _val8
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *MGetVideoInfoResponse) ReadField255(iprot thrift.TProtocol) error {
	p.BaseResp = &base.BaseResp{}
	if err := p.BaseResp.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.BaseResp, err)
	}
	return nil
}

func (p *MGetVideoInfoResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("MGetVideoInfoResponse"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField255(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *MGetVideoInfoResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("VideoInfos", thrift.MAP, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:VideoInfos: %s", p, err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.VideoInfos)); err != nil {
		return fmt.Errorf("error writing map begin: %s", err)
	}
	for k, v := range p.VideoInfos {
		if err := oprot.WriteString(string(k)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return fmt.Errorf("error writing map end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:VideoInfos: %s", p, err)
	}
	return err
}

func (p *MGetVideoInfoResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		return fmt.Errorf("%T write field begin error 255:BaseResp: %s", p, err)
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.BaseResp, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 255:BaseResp: %s", p, err)
	}
	return err
}

func (p *MGetVideoInfoResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MGetVideoInfoResponse(%+v)", *p)
}

type MRefreshVideoInfoRequest struct {
	Vids []string `thrift:"Vids,1" json:"Vids"`
	// unused fields # 2 to 254
	Base *base.Base `thrift:"Base,255" json:"Base"`
}

func NewMRefreshVideoInfoRequest() *MRefreshVideoInfoRequest {
	return &MRefreshVideoInfoRequest{}
}

func (p *MRefreshVideoInfoRequest) GetVids() []string {
	return p.Vids
}

var MRefreshVideoInfoRequest_Base_DEFAULT *base.Base

func (p *MRefreshVideoInfoRequest) GetBase() *base.Base {
	if !p.IsSetBase() {
		return MRefreshVideoInfoRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *MRefreshVideoInfoRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *MRefreshVideoInfoRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 255:
			if err := p.ReadField255(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *MRefreshVideoInfoRequest) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.Vids = tSlice
	for i := 0; i < size; i++ {
		var _elem9 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem9 = v
		}
		p.Vids = append(p.Vids, _elem9)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *MRefreshVideoInfoRequest) ReadField255(iprot thrift.TProtocol) error {
	p.Base = &base.Base{}
	if err := p.Base.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Base, err)
	}
	return nil
}

func (p *MRefreshVideoInfoRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("MRefreshVideoInfoRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField255(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *MRefreshVideoInfoRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Vids", thrift.LIST, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:Vids: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Vids)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.Vids {
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:Vids: %s", p, err)
	}
	return err
}

func (p *MRefreshVideoInfoRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
		return fmt.Errorf("%T write field begin error 255:Base: %s", p, err)
	}
	if err := p.Base.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Base, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 255:Base: %s", p, err)
	}
	return err
}

func (p *MRefreshVideoInfoRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MRefreshVideoInfoRequest(%+v)", *p)
}

type MRefreshVideoInfoResponse struct {
	// unused fields # 1 to 254
	BaseResp *base.BaseResp `thrift:"BaseResp,255" json:"BaseResp"`
}

func NewMRefreshVideoInfoResponse() *MRefreshVideoInfoResponse {
	return &MRefreshVideoInfoResponse{}
}

var MRefreshVideoInfoResponse_BaseResp_DEFAULT *base.BaseResp

func (p *MRefreshVideoInfoResponse) GetBaseResp() *base.BaseResp {
	if !p.IsSetBaseResp() {
		return MRefreshVideoInfoResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *MRefreshVideoInfoResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *MRefreshVideoInfoResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 255:
			if err := p.ReadField255(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *MRefreshVideoInfoResponse) ReadField255(iprot thrift.TProtocol) error {
	p.BaseResp = &base.BaseResp{}
	if err := p.BaseResp.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.BaseResp, err)
	}
	return nil
}

func (p *MRefreshVideoInfoResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("MRefreshVideoInfoResponse"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField255(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *MRefreshVideoInfoResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		return fmt.Errorf("%T write field begin error 255:BaseResp: %s", p, err)
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.BaseResp, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 255:BaseResp: %s", p, err)
	}
	return err
}

func (p *MRefreshVideoInfoResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MRefreshVideoInfoResponse(%+v)", *p)
}

type GetProviderInfoRequest struct {
	ProviderName string `thrift:"ProviderName,1" json:"ProviderName"`
	// unused fields # 2 to 254
	Base *base.Base `thrift:"Base,255" json:"Base"`
}

func NewGetProviderInfoRequest() *GetProviderInfoRequest {
	return &GetProviderInfoRequest{}
}

func (p *GetProviderInfoRequest) GetProviderName() string {
	return p.ProviderName
}

var GetProviderInfoRequest_Base_DEFAULT *base.Base

func (p *GetProviderInfoRequest) GetBase() *base.Base {
	if !p.IsSetBase() {
		return GetProviderInfoRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *GetProviderInfoRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetProviderInfoRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 255:
			if err := p.ReadField255(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetProviderInfoRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.ProviderName = v
	}
	return nil
}

func (p *GetProviderInfoRequest) ReadField255(iprot thrift.TProtocol) error {
	p.Base = &base.Base{}
	if err := p.Base.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Base, err)
	}
	return nil
}

func (p *GetProviderInfoRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetProviderInfoRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField255(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetProviderInfoRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ProviderName", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:ProviderName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ProviderName)); err != nil {
		return fmt.Errorf("%T.ProviderName (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:ProviderName: %s", p, err)
	}
	return err
}

func (p *GetProviderInfoRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
		return fmt.Errorf("%T write field begin error 255:Base: %s", p, err)
	}
	if err := p.Base.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Base, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 255:Base: %s", p, err)
	}
	return err
}

func (p *GetProviderInfoRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetProviderInfoRequest(%+v)", *p)
}

type GetProviderInfoResponse struct {
	ProviderInfo *videoarch_common.ProviderInfo `thrift:"ProviderInfo,1" json:"ProviderInfo"`
	// unused fields # 2 to 254
	BaseResp *base.BaseResp `thrift:"BaseResp,255" json:"BaseResp"`
}

func NewGetProviderInfoResponse() *GetProviderInfoResponse {
	return &GetProviderInfoResponse{}
}

var GetProviderInfoResponse_ProviderInfo_DEFAULT *videoarch_common.ProviderInfo

func (p *GetProviderInfoResponse) GetProviderInfo() *videoarch_common.ProviderInfo {
	if !p.IsSetProviderInfo() {
		return GetProviderInfoResponse_ProviderInfo_DEFAULT
	}
	return p.ProviderInfo
}

var GetProviderInfoResponse_BaseResp_DEFAULT *base.BaseResp

func (p *GetProviderInfoResponse) GetBaseResp() *base.BaseResp {
	if !p.IsSetBaseResp() {
		return GetProviderInfoResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *GetProviderInfoResponse) IsSetProviderInfo() bool {
	return p.ProviderInfo != nil
}

func (p *GetProviderInfoResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *GetProviderInfoResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 255:
			if err := p.ReadField255(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetProviderInfoResponse) ReadField1(iprot thrift.TProtocol) error {
	p.ProviderInfo = &videoarch_common.ProviderInfo{}
	if err := p.ProviderInfo.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.ProviderInfo, err)
	}
	return nil
}

func (p *GetProviderInfoResponse) ReadField255(iprot thrift.TProtocol) error {
	p.BaseResp = &base.BaseResp{}
	if err := p.BaseResp.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.BaseResp, err)
	}
	return nil
}

func (p *GetProviderInfoResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetProviderInfoResponse"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField255(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetProviderInfoResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetProviderInfo() {
		if err := oprot.WriteFieldBegin("ProviderInfo", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:ProviderInfo: %s", p, err)
		}
		if err := p.ProviderInfo.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.ProviderInfo, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:ProviderInfo: %s", p, err)
		}
	}
	return err
}

func (p *GetProviderInfoResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		return fmt.Errorf("%T write field begin error 255:BaseResp: %s", p, err)
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.BaseResp, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 255:BaseResp: %s", p, err)
	}
	return err
}

func (p *GetProviderInfoResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetProviderInfoResponse(%+v)", *p)
}

type GetProviderInfoByUserKeyRequest struct {
	UserKey string `thrift:"UserKey,1" json:"UserKey"`
	// unused fields # 2 to 254
	Base *base.Base `thrift:"Base,255" json:"Base"`
}

func NewGetProviderInfoByUserKeyRequest() *GetProviderInfoByUserKeyRequest {
	return &GetProviderInfoByUserKeyRequest{}
}

func (p *GetProviderInfoByUserKeyRequest) GetUserKey() string {
	return p.UserKey
}

var GetProviderInfoByUserKeyRequest_Base_DEFAULT *base.Base

func (p *GetProviderInfoByUserKeyRequest) GetBase() *base.Base {
	if !p.IsSetBase() {
		return GetProviderInfoByUserKeyRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *GetProviderInfoByUserKeyRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetProviderInfoByUserKeyRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 255:
			if err := p.ReadField255(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetProviderInfoByUserKeyRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.UserKey = v
	}
	return nil
}

func (p *GetProviderInfoByUserKeyRequest) ReadField255(iprot thrift.TProtocol) error {
	p.Base = &base.Base{}
	if err := p.Base.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Base, err)
	}
	return nil
}

func (p *GetProviderInfoByUserKeyRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetProviderInfoByUserKeyRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField255(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetProviderInfoByUserKeyRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("UserKey", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:UserKey: %s", p, err)
	}
	if err := oprot.WriteString(string(p.UserKey)); err != nil {
		return fmt.Errorf("%T.UserKey (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:UserKey: %s", p, err)
	}
	return err
}

func (p *GetProviderInfoByUserKeyRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
		return fmt.Errorf("%T write field begin error 255:Base: %s", p, err)
	}
	if err := p.Base.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Base, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 255:Base: %s", p, err)
	}
	return err
}

func (p *GetProviderInfoByUserKeyRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetProviderInfoByUserKeyRequest(%+v)", *p)
}

type GetProviderInfoByUserKeyResponse struct {
	ProviderInfo *videoarch_common.ProviderInfo `thrift:"ProviderInfo,1" json:"ProviderInfo"`
	// unused fields # 2 to 254
	BaseResp *base.BaseResp `thrift:"BaseResp,255" json:"BaseResp"`
}

func NewGetProviderInfoByUserKeyResponse() *GetProviderInfoByUserKeyResponse {
	return &GetProviderInfoByUserKeyResponse{}
}

var GetProviderInfoByUserKeyResponse_ProviderInfo_DEFAULT *videoarch_common.ProviderInfo

func (p *GetProviderInfoByUserKeyResponse) GetProviderInfo() *videoarch_common.ProviderInfo {
	if !p.IsSetProviderInfo() {
		return GetProviderInfoByUserKeyResponse_ProviderInfo_DEFAULT
	}
	return p.ProviderInfo
}

var GetProviderInfoByUserKeyResponse_BaseResp_DEFAULT *base.BaseResp

func (p *GetProviderInfoByUserKeyResponse) GetBaseResp() *base.BaseResp {
	if !p.IsSetBaseResp() {
		return GetProviderInfoByUserKeyResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *GetProviderInfoByUserKeyResponse) IsSetProviderInfo() bool {
	return p.ProviderInfo != nil
}

func (p *GetProviderInfoByUserKeyResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *GetProviderInfoByUserKeyResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 255:
			if err := p.ReadField255(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetProviderInfoByUserKeyResponse) ReadField1(iprot thrift.TProtocol) error {
	p.ProviderInfo = &videoarch_common.ProviderInfo{}
	if err := p.ProviderInfo.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.ProviderInfo, err)
	}
	return nil
}

func (p *GetProviderInfoByUserKeyResponse) ReadField255(iprot thrift.TProtocol) error {
	p.BaseResp = &base.BaseResp{}
	if err := p.BaseResp.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.BaseResp, err)
	}
	return nil
}

func (p *GetProviderInfoByUserKeyResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetProviderInfoByUserKeyResponse"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField255(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetProviderInfoByUserKeyResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetProviderInfo() {
		if err := oprot.WriteFieldBegin("ProviderInfo", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:ProviderInfo: %s", p, err)
		}
		if err := p.ProviderInfo.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.ProviderInfo, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:ProviderInfo: %s", p, err)
		}
	}
	return err
}

func (p *GetProviderInfoByUserKeyResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		return fmt.Errorf("%T write field begin error 255:BaseResp: %s", p, err)
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.BaseResp, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 255:BaseResp: %s", p, err)
	}
	return err
}

func (p *GetProviderInfoByUserKeyResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetProviderInfoByUserKeyResponse(%+v)", *p)
}

type CreatePosterCandidatesRequest struct {
	Posters []*videoarch_common.PosterCandidate `thrift:"Posters,1" json:"Posters"`
	// unused fields # 2 to 254
	Base *base.Base `thrift:"Base,255" json:"Base"`
}

func NewCreatePosterCandidatesRequest() *CreatePosterCandidatesRequest {
	return &CreatePosterCandidatesRequest{}
}

func (p *CreatePosterCandidatesRequest) GetPosters() []*videoarch_common.PosterCandidate {
	return p.Posters
}

var CreatePosterCandidatesRequest_Base_DEFAULT *base.Base

func (p *CreatePosterCandidatesRequest) GetBase() *base.Base {
	if !p.IsSetBase() {
		return CreatePosterCandidatesRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *CreatePosterCandidatesRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *CreatePosterCandidatesRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 255:
			if err := p.ReadField255(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CreatePosterCandidatesRequest) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*videoarch_common.PosterCandidate, 0, size)
	p.Posters = tSlice
	for i := 0; i < size; i++ {
		_elem10 := &videoarch_common.PosterCandidate{}
		if err := _elem10.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem10, err)
		}
		p.Posters = append(p.Posters, _elem10)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *CreatePosterCandidatesRequest) ReadField255(iprot thrift.TProtocol) error {
	p.Base = &base.Base{}
	if err := p.Base.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Base, err)
	}
	return nil
}

func (p *CreatePosterCandidatesRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("CreatePosterCandidatesRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField255(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *CreatePosterCandidatesRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Posters", thrift.LIST, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:Posters: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Posters)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.Posters {
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:Posters: %s", p, err)
	}
	return err
}

func (p *CreatePosterCandidatesRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
		return fmt.Errorf("%T write field begin error 255:Base: %s", p, err)
	}
	if err := p.Base.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Base, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 255:Base: %s", p, err)
	}
	return err
}

func (p *CreatePosterCandidatesRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreatePosterCandidatesRequest(%+v)", *p)
}

type CreatePosterCandidatesResponse struct {
	// unused fields # 1 to 254
	BaseResp *base.BaseResp `thrift:"BaseResp,255" json:"BaseResp"`
}

func NewCreatePosterCandidatesResponse() *CreatePosterCandidatesResponse {
	return &CreatePosterCandidatesResponse{}
}

var CreatePosterCandidatesResponse_BaseResp_DEFAULT *base.BaseResp

func (p *CreatePosterCandidatesResponse) GetBaseResp() *base.BaseResp {
	if !p.IsSetBaseResp() {
		return CreatePosterCandidatesResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *CreatePosterCandidatesResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *CreatePosterCandidatesResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 255:
			if err := p.ReadField255(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CreatePosterCandidatesResponse) ReadField255(iprot thrift.TProtocol) error {
	p.BaseResp = &base.BaseResp{}
	if err := p.BaseResp.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.BaseResp, err)
	}
	return nil
}

func (p *CreatePosterCandidatesResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("CreatePosterCandidatesResponse"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField255(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *CreatePosterCandidatesResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		return fmt.Errorf("%T write field begin error 255:BaseResp: %s", p, err)
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.BaseResp, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 255:BaseResp: %s", p, err)
	}
	return err
}

func (p *CreatePosterCandidatesResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreatePosterCandidatesResponse(%+v)", *p)
}

type MGetPosterCandidatesRequest struct {
	VideoIDs []string `thrift:"VideoIDs,1" json:"VideoIDs"`
	// unused fields # 2 to 254
	Base *base.Base `thrift:"Base,255" json:"Base"`
}

func NewMGetPosterCandidatesRequest() *MGetPosterCandidatesRequest {
	return &MGetPosterCandidatesRequest{}
}

func (p *MGetPosterCandidatesRequest) GetVideoIDs() []string {
	return p.VideoIDs
}

var MGetPosterCandidatesRequest_Base_DEFAULT *base.Base

func (p *MGetPosterCandidatesRequest) GetBase() *base.Base {
	if !p.IsSetBase() {
		return MGetPosterCandidatesRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *MGetPosterCandidatesRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *MGetPosterCandidatesRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 255:
			if err := p.ReadField255(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *MGetPosterCandidatesRequest) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.VideoIDs = tSlice
	for i := 0; i < size; i++ {
		var _elem11 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem11 = v
		}
		p.VideoIDs = append(p.VideoIDs, _elem11)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *MGetPosterCandidatesRequest) ReadField255(iprot thrift.TProtocol) error {
	p.Base = &base.Base{}
	if err := p.Base.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Base, err)
	}
	return nil
}

func (p *MGetPosterCandidatesRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("MGetPosterCandidatesRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField255(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *MGetPosterCandidatesRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("VideoIDs", thrift.LIST, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:VideoIDs: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.VideoIDs)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.VideoIDs {
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:VideoIDs: %s", p, err)
	}
	return err
}

func (p *MGetPosterCandidatesRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
		return fmt.Errorf("%T write field begin error 255:Base: %s", p, err)
	}
	if err := p.Base.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Base, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 255:Base: %s", p, err)
	}
	return err
}

func (p *MGetPosterCandidatesRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MGetPosterCandidatesRequest(%+v)", *p)
}

type MGetPosterCandidatesResponse struct {
	Posters map[string][]*videoarch_common.PosterCandidate `thrift:"Posters,1" json:"Posters"`
	// unused fields # 2 to 254
	BaseResp *base.BaseResp `thrift:"BaseResp,255" json:"BaseResp"`
}

func NewMGetPosterCandidatesResponse() *MGetPosterCandidatesResponse {
	return &MGetPosterCandidatesResponse{}
}

func (p *MGetPosterCandidatesResponse) GetPosters() map[string][]*videoarch_common.PosterCandidate {
	return p.Posters
}

var MGetPosterCandidatesResponse_BaseResp_DEFAULT *base.BaseResp

func (p *MGetPosterCandidatesResponse) GetBaseResp() *base.BaseResp {
	if !p.IsSetBaseResp() {
		return MGetPosterCandidatesResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *MGetPosterCandidatesResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *MGetPosterCandidatesResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 255:
			if err := p.ReadField255(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *MGetPosterCandidatesResponse) ReadField1(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string][]*videoarch_common.PosterCandidate, size)
	p.Posters = tMap
	for i := 0; i < size; i++ {
		var _key12 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key12 = v
		}
		_, size, err := iprot.ReadListBegin()
		if err != nil {
			return fmt.Errorf("error reading list begin: %s", err)
		}
		tSlice := make([]*videoarch_common.PosterCandidate, 0, size)
		_val13 := tSlice
		for i := 0; i < size; i++ {
			_elem14 := &videoarch_common.PosterCandidate{}
			if err := _elem14.Read(iprot); err != nil {
				return fmt.Errorf("%T error reading struct: %s", _elem14, err)
			}
			_val13 = append(_val13, _elem14)
		}
		if err := iprot.ReadListEnd(); err != nil {
			return fmt.Errorf("error reading list end: %s", err)
		}
		p.Posters[_key12] = _val13
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *MGetPosterCandidatesResponse) ReadField255(iprot thrift.TProtocol) error {
	p.BaseResp = &base.BaseResp{}
	if err := p.BaseResp.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.BaseResp, err)
	}
	return nil
}

func (p *MGetPosterCandidatesResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("MGetPosterCandidatesResponse"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField255(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *MGetPosterCandidatesResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Posters", thrift.MAP, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:Posters: %s", p, err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.LIST, len(p.Posters)); err != nil {
		return fmt.Errorf("error writing map begin: %s", err)
	}
	for k, v := range p.Posters {
		if err := oprot.WriteString(string(k)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(v)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range v {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return fmt.Errorf("error writing map end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:Posters: %s", p, err)
	}
	return err
}

func (p *MGetPosterCandidatesResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		return fmt.Errorf("%T write field begin error 255:BaseResp: %s", p, err)
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.BaseResp, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 255:BaseResp: %s", p, err)
	}
	return err
}

func (p *MGetPosterCandidatesResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MGetPosterCandidatesResponse(%+v)", *p)
}

type MUpdateVideoExtraRequest struct {
	FileID string            `thrift:"FileID,1" json:"FileID"`
	Attrs  map[string]string `thrift:"Attrs,2" json:"Attrs"`
	// unused fields # 3 to 254
	Base *base.Base `thrift:"Base,255" json:"Base"`
}

func NewMUpdateVideoExtraRequest() *MUpdateVideoExtraRequest {
	return &MUpdateVideoExtraRequest{}
}

func (p *MUpdateVideoExtraRequest) GetFileID() string {
	return p.FileID
}

func (p *MUpdateVideoExtraRequest) GetAttrs() map[string]string {
	return p.Attrs
}

var MUpdateVideoExtraRequest_Base_DEFAULT *base.Base

func (p *MUpdateVideoExtraRequest) GetBase() *base.Base {
	if !p.IsSetBase() {
		return MUpdateVideoExtraRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *MUpdateVideoExtraRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *MUpdateVideoExtraRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 255:
			if err := p.ReadField255(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *MUpdateVideoExtraRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.FileID = v
	}
	return nil
}

func (p *MUpdateVideoExtraRequest) ReadField2(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string]string, size)
	p.Attrs = tMap
	for i := 0; i < size; i++ {
		var _key15 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key15 = v
		}
		var _val16 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_val16 = v
		}
		p.Attrs[_key15] = _val16
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *MUpdateVideoExtraRequest) ReadField255(iprot thrift.TProtocol) error {
	p.Base = &base.Base{}
	if err := p.Base.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Base, err)
	}
	return nil
}

func (p *MUpdateVideoExtraRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("MUpdateVideoExtraRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField255(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *MUpdateVideoExtraRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("FileID", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:FileID: %s", p, err)
	}
	if err := oprot.WriteString(string(p.FileID)); err != nil {
		return fmt.Errorf("%T.FileID (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:FileID: %s", p, err)
	}
	return err
}

func (p *MUpdateVideoExtraRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Attrs", thrift.MAP, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:Attrs: %s", p, err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Attrs)); err != nil {
		return fmt.Errorf("error writing map begin: %s", err)
	}
	for k, v := range p.Attrs {
		if err := oprot.WriteString(string(k)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return fmt.Errorf("error writing map end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:Attrs: %s", p, err)
	}
	return err
}

func (p *MUpdateVideoExtraRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
		return fmt.Errorf("%T write field begin error 255:Base: %s", p, err)
	}
	if err := p.Base.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Base, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 255:Base: %s", p, err)
	}
	return err
}

func (p *MUpdateVideoExtraRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MUpdateVideoExtraRequest(%+v)", *p)
}

type MUpdateVideoExtraResponse struct {
	// unused fields # 1 to 254
	BaseResp *base.BaseResp `thrift:"BaseResp,255" json:"BaseResp"`
}

func NewMUpdateVideoExtraResponse() *MUpdateVideoExtraResponse {
	return &MUpdateVideoExtraResponse{}
}

var MUpdateVideoExtraResponse_BaseResp_DEFAULT *base.BaseResp

func (p *MUpdateVideoExtraResponse) GetBaseResp() *base.BaseResp {
	if !p.IsSetBaseResp() {
		return MUpdateVideoExtraResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *MUpdateVideoExtraResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *MUpdateVideoExtraResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 255:
			if err := p.ReadField255(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *MUpdateVideoExtraResponse) ReadField255(iprot thrift.TProtocol) error {
	p.BaseResp = &base.BaseResp{}
	if err := p.BaseResp.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.BaseResp, err)
	}
	return nil
}

func (p *MUpdateVideoExtraResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("MUpdateVideoExtraResponse"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField255(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *MUpdateVideoExtraResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		return fmt.Errorf("%T write field begin error 255:BaseResp: %s", p, err)
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.BaseResp, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 255:BaseResp: %s", p, err)
	}
	return err
}

func (p *MUpdateVideoExtraResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MUpdateVideoExtraResponse(%+v)", *p)
}

type UpdateVideoExtraRequest struct {
	FileID    string `thrift:"FileID,1" json:"FileID"`
	AttrName  string `thrift:"AttrName,2" json:"AttrName"`
	AttrValue string `thrift:"AttrValue,3" json:"AttrValue"`
	// unused fields # 4 to 254
	Base *base.Base `thrift:"Base,255" json:"Base"`
}

func NewUpdateVideoExtraRequest() *UpdateVideoExtraRequest {
	return &UpdateVideoExtraRequest{}
}

func (p *UpdateVideoExtraRequest) GetFileID() string {
	return p.FileID
}

func (p *UpdateVideoExtraRequest) GetAttrName() string {
	return p.AttrName
}

func (p *UpdateVideoExtraRequest) GetAttrValue() string {
	return p.AttrValue
}

var UpdateVideoExtraRequest_Base_DEFAULT *base.Base

func (p *UpdateVideoExtraRequest) GetBase() *base.Base {
	if !p.IsSetBase() {
		return UpdateVideoExtraRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *UpdateVideoExtraRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *UpdateVideoExtraRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 255:
			if err := p.ReadField255(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *UpdateVideoExtraRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.FileID = v
	}
	return nil
}

func (p *UpdateVideoExtraRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.AttrName = v
	}
	return nil
}

func (p *UpdateVideoExtraRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.AttrValue = v
	}
	return nil
}

func (p *UpdateVideoExtraRequest) ReadField255(iprot thrift.TProtocol) error {
	p.Base = &base.Base{}
	if err := p.Base.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Base, err)
	}
	return nil
}

func (p *UpdateVideoExtraRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UpdateVideoExtraRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField255(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *UpdateVideoExtraRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("FileID", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:FileID: %s", p, err)
	}
	if err := oprot.WriteString(string(p.FileID)); err != nil {
		return fmt.Errorf("%T.FileID (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:FileID: %s", p, err)
	}
	return err
}

func (p *UpdateVideoExtraRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("AttrName", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:AttrName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.AttrName)); err != nil {
		return fmt.Errorf("%T.AttrName (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:AttrName: %s", p, err)
	}
	return err
}

func (p *UpdateVideoExtraRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("AttrValue", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:AttrValue: %s", p, err)
	}
	if err := oprot.WriteString(string(p.AttrValue)); err != nil {
		return fmt.Errorf("%T.AttrValue (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:AttrValue: %s", p, err)
	}
	return err
}

func (p *UpdateVideoExtraRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
		return fmt.Errorf("%T write field begin error 255:Base: %s", p, err)
	}
	if err := p.Base.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Base, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 255:Base: %s", p, err)
	}
	return err
}

func (p *UpdateVideoExtraRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateVideoExtraRequest(%+v)", *p)
}

type UpdateVideoExtraResponse struct {
	// unused fields # 1 to 254
	BaseResp *base.BaseResp `thrift:"BaseResp,255" json:"BaseResp"`
}

func NewUpdateVideoExtraResponse() *UpdateVideoExtraResponse {
	return &UpdateVideoExtraResponse{}
}

var UpdateVideoExtraResponse_BaseResp_DEFAULT *base.BaseResp

func (p *UpdateVideoExtraResponse) GetBaseResp() *base.BaseResp {
	if !p.IsSetBaseResp() {
		return UpdateVideoExtraResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *UpdateVideoExtraResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *UpdateVideoExtraResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 255:
			if err := p.ReadField255(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *UpdateVideoExtraResponse) ReadField255(iprot thrift.TProtocol) error {
	p.BaseResp = &base.BaseResp{}
	if err := p.BaseResp.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.BaseResp, err)
	}
	return nil
}

func (p *UpdateVideoExtraResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UpdateVideoExtraResponse"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField255(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *UpdateVideoExtraResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		return fmt.Errorf("%T write field begin error 255:BaseResp: %s", p, err)
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.BaseResp, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 255:BaseResp: %s", p, err)
	}
	return err
}

func (p *UpdateVideoExtraResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateVideoExtraResponse(%+v)", *p)
}

type MGetVideoPlayStatusRequest struct {
	VideoIDs []string `thrift:"VideoIDs,1" json:"VideoIDs"`
	// unused fields # 2 to 254
	Base *base.Base `thrift:"Base,255" json:"Base"`
}

func NewMGetVideoPlayStatusRequest() *MGetVideoPlayStatusRequest {
	return &MGetVideoPlayStatusRequest{}
}

func (p *MGetVideoPlayStatusRequest) GetVideoIDs() []string {
	return p.VideoIDs
}

var MGetVideoPlayStatusRequest_Base_DEFAULT *base.Base

func (p *MGetVideoPlayStatusRequest) GetBase() *base.Base {
	if !p.IsSetBase() {
		return MGetVideoPlayStatusRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *MGetVideoPlayStatusRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *MGetVideoPlayStatusRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 255:
			if err := p.ReadField255(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *MGetVideoPlayStatusRequest) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.VideoIDs = tSlice
	for i := 0; i < size; i++ {
		var _elem17 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem17 = v
		}
		p.VideoIDs = append(p.VideoIDs, _elem17)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *MGetVideoPlayStatusRequest) ReadField255(iprot thrift.TProtocol) error {
	p.Base = &base.Base{}
	if err := p.Base.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Base, err)
	}
	return nil
}

func (p *MGetVideoPlayStatusRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("MGetVideoPlayStatusRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField255(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *MGetVideoPlayStatusRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("VideoIDs", thrift.LIST, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:VideoIDs: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.VideoIDs)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.VideoIDs {
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:VideoIDs: %s", p, err)
	}
	return err
}

func (p *MGetVideoPlayStatusRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
		return fmt.Errorf("%T write field begin error 255:Base: %s", p, err)
	}
	if err := p.Base.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Base, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 255:Base: %s", p, err)
	}
	return err
}

func (p *MGetVideoPlayStatusRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MGetVideoPlayStatusRequest(%+v)", *p)
}

type MGetVideoPlayStatusResponse struct {
	VideoPlayStatus map[string]string `thrift:"VideoPlayStatus,1" json:"VideoPlayStatus"`
	// unused fields # 2 to 254
	BaseResp *base.BaseResp `thrift:"BaseResp,255" json:"BaseResp"`
}

func NewMGetVideoPlayStatusResponse() *MGetVideoPlayStatusResponse {
	return &MGetVideoPlayStatusResponse{}
}

func (p *MGetVideoPlayStatusResponse) GetVideoPlayStatus() map[string]string {
	return p.VideoPlayStatus
}

var MGetVideoPlayStatusResponse_BaseResp_DEFAULT *base.BaseResp

func (p *MGetVideoPlayStatusResponse) GetBaseResp() *base.BaseResp {
	if !p.IsSetBaseResp() {
		return MGetVideoPlayStatusResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *MGetVideoPlayStatusResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *MGetVideoPlayStatusResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 255:
			if err := p.ReadField255(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *MGetVideoPlayStatusResponse) ReadField1(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string]string, size)
	p.VideoPlayStatus = tMap
	for i := 0; i < size; i++ {
		var _key18 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key18 = v
		}
		var _val19 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_val19 = v
		}
		p.VideoPlayStatus[_key18] = _val19
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *MGetVideoPlayStatusResponse) ReadField255(iprot thrift.TProtocol) error {
	p.BaseResp = &base.BaseResp{}
	if err := p.BaseResp.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.BaseResp, err)
	}
	return nil
}

func (p *MGetVideoPlayStatusResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("MGetVideoPlayStatusResponse"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField255(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *MGetVideoPlayStatusResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("VideoPlayStatus", thrift.MAP, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:VideoPlayStatus: %s", p, err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.VideoPlayStatus)); err != nil {
		return fmt.Errorf("error writing map begin: %s", err)
	}
	for k, v := range p.VideoPlayStatus {
		if err := oprot.WriteString(string(k)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return fmt.Errorf("error writing map end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:VideoPlayStatus: %s", p, err)
	}
	return err
}

func (p *MGetVideoPlayStatusResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		return fmt.Errorf("%T write field begin error 255:BaseResp: %s", p, err)
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.BaseResp, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 255:BaseResp: %s", p, err)
	}
	return err
}

func (p *MGetVideoPlayStatusResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MGetVideoPlayStatusResponse(%+v)", *p)
}

type UpdateVideoPlayStatusRequest struct {
	VideoID    string `thrift:"VideoID,1" json:"VideoID"`
	PlayStatus string `thrift:"PlayStatus,2" json:"PlayStatus"`
	// unused fields # 3 to 254
	Base *base.Base `thrift:"Base,255" json:"Base"`
}

func NewUpdateVideoPlayStatusRequest() *UpdateVideoPlayStatusRequest {
	return &UpdateVideoPlayStatusRequest{}
}

func (p *UpdateVideoPlayStatusRequest) GetVideoID() string {
	return p.VideoID
}

func (p *UpdateVideoPlayStatusRequest) GetPlayStatus() string {
	return p.PlayStatus
}

var UpdateVideoPlayStatusRequest_Base_DEFAULT *base.Base

func (p *UpdateVideoPlayStatusRequest) GetBase() *base.Base {
	if !p.IsSetBase() {
		return UpdateVideoPlayStatusRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *UpdateVideoPlayStatusRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *UpdateVideoPlayStatusRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 255:
			if err := p.ReadField255(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *UpdateVideoPlayStatusRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.VideoID = v
	}
	return nil
}

func (p *UpdateVideoPlayStatusRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.PlayStatus = v
	}
	return nil
}

func (p *UpdateVideoPlayStatusRequest) ReadField255(iprot thrift.TProtocol) error {
	p.Base = &base.Base{}
	if err := p.Base.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Base, err)
	}
	return nil
}

func (p *UpdateVideoPlayStatusRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UpdateVideoPlayStatusRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField255(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *UpdateVideoPlayStatusRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("VideoID", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:VideoID: %s", p, err)
	}
	if err := oprot.WriteString(string(p.VideoID)); err != nil {
		return fmt.Errorf("%T.VideoID (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:VideoID: %s", p, err)
	}
	return err
}

func (p *UpdateVideoPlayStatusRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("PlayStatus", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:PlayStatus: %s", p, err)
	}
	if err := oprot.WriteString(string(p.PlayStatus)); err != nil {
		return fmt.Errorf("%T.PlayStatus (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:PlayStatus: %s", p, err)
	}
	return err
}

func (p *UpdateVideoPlayStatusRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
		return fmt.Errorf("%T write field begin error 255:Base: %s", p, err)
	}
	if err := p.Base.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Base, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 255:Base: %s", p, err)
	}
	return err
}

func (p *UpdateVideoPlayStatusRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateVideoPlayStatusRequest(%+v)", *p)
}

type UpdateVideoPlayStatusResponse struct {
	// unused fields # 1 to 254
	BaseResp *base.BaseResp `thrift:"BaseResp,255" json:"BaseResp"`
}

func NewUpdateVideoPlayStatusResponse() *UpdateVideoPlayStatusResponse {
	return &UpdateVideoPlayStatusResponse{}
}

var UpdateVideoPlayStatusResponse_BaseResp_DEFAULT *base.BaseResp

func (p *UpdateVideoPlayStatusResponse) GetBaseResp() *base.BaseResp {
	if !p.IsSetBaseResp() {
		return UpdateVideoPlayStatusResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *UpdateVideoPlayStatusResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *UpdateVideoPlayStatusResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 255:
			if err := p.ReadField255(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *UpdateVideoPlayStatusResponse) ReadField255(iprot thrift.TProtocol) error {
	p.BaseResp = &base.BaseResp{}
	if err := p.BaseResp.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.BaseResp, err)
	}
	return nil
}

func (p *UpdateVideoPlayStatusResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UpdateVideoPlayStatusResponse"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField255(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *UpdateVideoPlayStatusResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		return fmt.Errorf("%T write field begin error 255:BaseResp: %s", p, err)
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.BaseResp, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 255:BaseResp: %s", p, err)
	}
	return err
}

func (p *UpdateVideoPlayStatusResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateVideoPlayStatusResponse(%+v)", *p)
}

type UpdateEncodedTypeRequest struct {
	VideoID     string `thrift:"VideoID,1" json:"VideoID"`
	EncodedType string `thrift:"EncodedType,2" json:"EncodedType"`
	// unused fields # 3 to 254
	Base *base.Base `thrift:"Base,255" json:"Base"`
}

func NewUpdateEncodedTypeRequest() *UpdateEncodedTypeRequest {
	return &UpdateEncodedTypeRequest{}
}

func (p *UpdateEncodedTypeRequest) GetVideoID() string {
	return p.VideoID
}

func (p *UpdateEncodedTypeRequest) GetEncodedType() string {
	return p.EncodedType
}

var UpdateEncodedTypeRequest_Base_DEFAULT *base.Base

func (p *UpdateEncodedTypeRequest) GetBase() *base.Base {
	if !p.IsSetBase() {
		return UpdateEncodedTypeRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *UpdateEncodedTypeRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *UpdateEncodedTypeRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 255:
			if err := p.ReadField255(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *UpdateEncodedTypeRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.VideoID = v
	}
	return nil
}

func (p *UpdateEncodedTypeRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.EncodedType = v
	}
	return nil
}

func (p *UpdateEncodedTypeRequest) ReadField255(iprot thrift.TProtocol) error {
	p.Base = &base.Base{}
	if err := p.Base.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Base, err)
	}
	return nil
}

func (p *UpdateEncodedTypeRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UpdateEncodedTypeRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField255(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *UpdateEncodedTypeRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("VideoID", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:VideoID: %s", p, err)
	}
	if err := oprot.WriteString(string(p.VideoID)); err != nil {
		return fmt.Errorf("%T.VideoID (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:VideoID: %s", p, err)
	}
	return err
}

func (p *UpdateEncodedTypeRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("EncodedType", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:EncodedType: %s", p, err)
	}
	if err := oprot.WriteString(string(p.EncodedType)); err != nil {
		return fmt.Errorf("%T.EncodedType (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:EncodedType: %s", p, err)
	}
	return err
}

func (p *UpdateEncodedTypeRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
		return fmt.Errorf("%T write field begin error 255:Base: %s", p, err)
	}
	if err := p.Base.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Base, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 255:Base: %s", p, err)
	}
	return err
}

func (p *UpdateEncodedTypeRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateEncodedTypeRequest(%+v)", *p)
}

type UpdateEncodedTypeResponse struct {
	// unused fields # 1 to 254
	BaseResp *base.BaseResp `thrift:"BaseResp,255" json:"BaseResp"`
}

func NewUpdateEncodedTypeResponse() *UpdateEncodedTypeResponse {
	return &UpdateEncodedTypeResponse{}
}

var UpdateEncodedTypeResponse_BaseResp_DEFAULT *base.BaseResp

func (p *UpdateEncodedTypeResponse) GetBaseResp() *base.BaseResp {
	if !p.IsSetBaseResp() {
		return UpdateEncodedTypeResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *UpdateEncodedTypeResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *UpdateEncodedTypeResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 255:
			if err := p.ReadField255(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *UpdateEncodedTypeResponse) ReadField255(iprot thrift.TProtocol) error {
	p.BaseResp = &base.BaseResp{}
	if err := p.BaseResp.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.BaseResp, err)
	}
	return nil
}

func (p *UpdateEncodedTypeResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UpdateEncodedTypeResponse"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField255(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *UpdateEncodedTypeResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		return fmt.Errorf("%T write field begin error 255:BaseResp: %s", p, err)
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.BaseResp, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 255:BaseResp: %s", p, err)
	}
	return err
}

func (p *UpdateEncodedTypeResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateEncodedTypeResponse(%+v)", *p)
}

type GetDynamicLogoInfoRequest struct {
	UserID    int64  `thrift:"UserID,1" json:"UserID"`
	UserName  string `thrift:"UserName,2" json:"UserName"`
	AvatarURI string `thrift:"AvatarURI,3" json:"AvatarURI"`
	// unused fields # 4 to 254
	Base *base.Base `thrift:"Base,255" json:"Base"`
}

func NewGetDynamicLogoInfoRequest() *GetDynamicLogoInfoRequest {
	return &GetDynamicLogoInfoRequest{}
}

func (p *GetDynamicLogoInfoRequest) GetUserID() int64 {
	return p.UserID
}

func (p *GetDynamicLogoInfoRequest) GetUserName() string {
	return p.UserName
}

func (p *GetDynamicLogoInfoRequest) GetAvatarURI() string {
	return p.AvatarURI
}

var GetDynamicLogoInfoRequest_Base_DEFAULT *base.Base

func (p *GetDynamicLogoInfoRequest) GetBase() *base.Base {
	if !p.IsSetBase() {
		return GetDynamicLogoInfoRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *GetDynamicLogoInfoRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetDynamicLogoInfoRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 255:
			if err := p.ReadField255(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetDynamicLogoInfoRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.UserID = v
	}
	return nil
}

func (p *GetDynamicLogoInfoRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.UserName = v
	}
	return nil
}

func (p *GetDynamicLogoInfoRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.AvatarURI = v
	}
	return nil
}

func (p *GetDynamicLogoInfoRequest) ReadField255(iprot thrift.TProtocol) error {
	p.Base = &base.Base{}
	if err := p.Base.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Base, err)
	}
	return nil
}

func (p *GetDynamicLogoInfoRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetDynamicLogoInfoRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField255(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetDynamicLogoInfoRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("UserID", thrift.I64, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:UserID: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.UserID)); err != nil {
		return fmt.Errorf("%T.UserID (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:UserID: %s", p, err)
	}
	return err
}

func (p *GetDynamicLogoInfoRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("UserName", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:UserName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.UserName)); err != nil {
		return fmt.Errorf("%T.UserName (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:UserName: %s", p, err)
	}
	return err
}

func (p *GetDynamicLogoInfoRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("AvatarURI", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:AvatarURI: %s", p, err)
	}
	if err := oprot.WriteString(string(p.AvatarURI)); err != nil {
		return fmt.Errorf("%T.AvatarURI (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:AvatarURI: %s", p, err)
	}
	return err
}

func (p *GetDynamicLogoInfoRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
		return fmt.Errorf("%T write field begin error 255:Base: %s", p, err)
	}
	if err := p.Base.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Base, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 255:Base: %s", p, err)
	}
	return err
}

func (p *GetDynamicLogoInfoRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetDynamicLogoInfoRequest(%+v)", *p)
}

type GetDynamicLogoInfoResponse struct {
	LogoURI string `thrift:"LogoURI,1" json:"LogoURI"`
	// unused fields # 2 to 254
	BaseResp *base.BaseResp `thrift:"BaseResp,255" json:"BaseResp"`
}

func NewGetDynamicLogoInfoResponse() *GetDynamicLogoInfoResponse {
	return &GetDynamicLogoInfoResponse{}
}

func (p *GetDynamicLogoInfoResponse) GetLogoURI() string {
	return p.LogoURI
}

var GetDynamicLogoInfoResponse_BaseResp_DEFAULT *base.BaseResp

func (p *GetDynamicLogoInfoResponse) GetBaseResp() *base.BaseResp {
	if !p.IsSetBaseResp() {
		return GetDynamicLogoInfoResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *GetDynamicLogoInfoResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *GetDynamicLogoInfoResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 255:
			if err := p.ReadField255(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetDynamicLogoInfoResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.LogoURI = v
	}
	return nil
}

func (p *GetDynamicLogoInfoResponse) ReadField255(iprot thrift.TProtocol) error {
	p.BaseResp = &base.BaseResp{}
	if err := p.BaseResp.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.BaseResp, err)
	}
	return nil
}

func (p *GetDynamicLogoInfoResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetDynamicLogoInfoResponse"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField255(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetDynamicLogoInfoResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("LogoURI", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:LogoURI: %s", p, err)
	}
	if err := oprot.WriteString(string(p.LogoURI)); err != nil {
		return fmt.Errorf("%T.LogoURI (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:LogoURI: %s", p, err)
	}
	return err
}

func (p *GetDynamicLogoInfoResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		return fmt.Errorf("%T write field begin error 255:BaseResp: %s", p, err)
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.BaseResp, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 255:BaseResp: %s", p, err)
	}
	return err
}

func (p *GetDynamicLogoInfoResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetDynamicLogoInfoResponse(%+v)", *p)
}

type CreateDynamicLogoInfoRequest struct {
	UserID    int64  `thrift:"UserID,1" json:"UserID"`
	UserName  string `thrift:"UserName,2" json:"UserName"`
	AvatarURI string `thrift:"AvatarURI,3" json:"AvatarURI"`
	Provider  string `thrift:"Provider,4" json:"Provider"`
	LogoURI   string `thrift:"LogoURI,5" json:"LogoURI"`
	// unused fields # 6 to 254
	Base *base.Base `thrift:"Base,255" json:"Base"`
}

func NewCreateDynamicLogoInfoRequest() *CreateDynamicLogoInfoRequest {
	return &CreateDynamicLogoInfoRequest{}
}

func (p *CreateDynamicLogoInfoRequest) GetUserID() int64 {
	return p.UserID
}

func (p *CreateDynamicLogoInfoRequest) GetUserName() string {
	return p.UserName
}

func (p *CreateDynamicLogoInfoRequest) GetAvatarURI() string {
	return p.AvatarURI
}

func (p *CreateDynamicLogoInfoRequest) GetProvider() string {
	return p.Provider
}

func (p *CreateDynamicLogoInfoRequest) GetLogoURI() string {
	return p.LogoURI
}

var CreateDynamicLogoInfoRequest_Base_DEFAULT *base.Base

func (p *CreateDynamicLogoInfoRequest) GetBase() *base.Base {
	if !p.IsSetBase() {
		return CreateDynamicLogoInfoRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *CreateDynamicLogoInfoRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *CreateDynamicLogoInfoRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 255:
			if err := p.ReadField255(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CreateDynamicLogoInfoRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.UserID = v
	}
	return nil
}

func (p *CreateDynamicLogoInfoRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.UserName = v
	}
	return nil
}

func (p *CreateDynamicLogoInfoRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.AvatarURI = v
	}
	return nil
}

func (p *CreateDynamicLogoInfoRequest) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.Provider = v
	}
	return nil
}

func (p *CreateDynamicLogoInfoRequest) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.LogoURI = v
	}
	return nil
}

func (p *CreateDynamicLogoInfoRequest) ReadField255(iprot thrift.TProtocol) error {
	p.Base = &base.Base{}
	if err := p.Base.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Base, err)
	}
	return nil
}

func (p *CreateDynamicLogoInfoRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("CreateDynamicLogoInfoRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField255(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *CreateDynamicLogoInfoRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("UserID", thrift.I64, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:UserID: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.UserID)); err != nil {
		return fmt.Errorf("%T.UserID (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:UserID: %s", p, err)
	}
	return err
}

func (p *CreateDynamicLogoInfoRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("UserName", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:UserName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.UserName)); err != nil {
		return fmt.Errorf("%T.UserName (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:UserName: %s", p, err)
	}
	return err
}

func (p *CreateDynamicLogoInfoRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("AvatarURI", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:AvatarURI: %s", p, err)
	}
	if err := oprot.WriteString(string(p.AvatarURI)); err != nil {
		return fmt.Errorf("%T.AvatarURI (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:AvatarURI: %s", p, err)
	}
	return err
}

func (p *CreateDynamicLogoInfoRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Provider", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:Provider: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Provider)); err != nil {
		return fmt.Errorf("%T.Provider (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:Provider: %s", p, err)
	}
	return err
}

func (p *CreateDynamicLogoInfoRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("LogoURI", thrift.STRING, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:LogoURI: %s", p, err)
	}
	if err := oprot.WriteString(string(p.LogoURI)); err != nil {
		return fmt.Errorf("%T.LogoURI (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:LogoURI: %s", p, err)
	}
	return err
}

func (p *CreateDynamicLogoInfoRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
		return fmt.Errorf("%T write field begin error 255:Base: %s", p, err)
	}
	if err := p.Base.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Base, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 255:Base: %s", p, err)
	}
	return err
}

func (p *CreateDynamicLogoInfoRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateDynamicLogoInfoRequest(%+v)", *p)
}

type CreateDynamicLogoInfoResponse struct {
	// unused fields # 1 to 254
	BaseResp *base.BaseResp `thrift:"BaseResp,255" json:"BaseResp"`
}

func NewCreateDynamicLogoInfoResponse() *CreateDynamicLogoInfoResponse {
	return &CreateDynamicLogoInfoResponse{}
}

var CreateDynamicLogoInfoResponse_BaseResp_DEFAULT *base.BaseResp

func (p *CreateDynamicLogoInfoResponse) GetBaseResp() *base.BaseResp {
	if !p.IsSetBaseResp() {
		return CreateDynamicLogoInfoResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *CreateDynamicLogoInfoResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *CreateDynamicLogoInfoResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 255:
			if err := p.ReadField255(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CreateDynamicLogoInfoResponse) ReadField255(iprot thrift.TProtocol) error {
	p.BaseResp = &base.BaseResp{}
	if err := p.BaseResp.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.BaseResp, err)
	}
	return nil
}

func (p *CreateDynamicLogoInfoResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("CreateDynamicLogoInfoResponse"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField255(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *CreateDynamicLogoInfoResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		return fmt.Errorf("%T write field begin error 255:BaseResp: %s", p, err)
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.BaseResp, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 255:BaseResp: %s", p, err)
	}
	return err
}

func (p *CreateDynamicLogoInfoResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateDynamicLogoInfoResponse(%+v)", *p)
}

type GetVideoStoreInfosByMD5Request struct {
	MD5 string `thrift:"MD5,1" json:"MD5"`
	// unused fields # 2 to 254
	Base *base.Base `thrift:"Base,255" json:"Base"`
}

func NewGetVideoStoreInfosByMD5Request() *GetVideoStoreInfosByMD5Request {
	return &GetVideoStoreInfosByMD5Request{}
}

func (p *GetVideoStoreInfosByMD5Request) GetMD5() string {
	return p.MD5
}

var GetVideoStoreInfosByMD5Request_Base_DEFAULT *base.Base

func (p *GetVideoStoreInfosByMD5Request) GetBase() *base.Base {
	if !p.IsSetBase() {
		return GetVideoStoreInfosByMD5Request_Base_DEFAULT
	}
	return p.Base
}
func (p *GetVideoStoreInfosByMD5Request) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetVideoStoreInfosByMD5Request) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 255:
			if err := p.ReadField255(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetVideoStoreInfosByMD5Request) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.MD5 = v
	}
	return nil
}

func (p *GetVideoStoreInfosByMD5Request) ReadField255(iprot thrift.TProtocol) error {
	p.Base = &base.Base{}
	if err := p.Base.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Base, err)
	}
	return nil
}

func (p *GetVideoStoreInfosByMD5Request) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetVideoStoreInfosByMD5Request"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField255(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetVideoStoreInfosByMD5Request) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("MD5", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:MD5: %s", p, err)
	}
	if err := oprot.WriteString(string(p.MD5)); err != nil {
		return fmt.Errorf("%T.MD5 (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:MD5: %s", p, err)
	}
	return err
}

func (p *GetVideoStoreInfosByMD5Request) writeField255(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
		return fmt.Errorf("%T write field begin error 255:Base: %s", p, err)
	}
	if err := p.Base.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Base, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 255:Base: %s", p, err)
	}
	return err
}

func (p *GetVideoStoreInfosByMD5Request) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetVideoStoreInfosByMD5Request(%+v)", *p)
}

type GetVideoStoreInfosByMD5Response struct {
	VideoInfos []*videoarch_common.VideoStoreInfo `thrift:"VideoInfos,1" json:"VideoInfos"`
	// unused fields # 2 to 254
	BaseResp *base.BaseResp `thrift:"BaseResp,255" json:"BaseResp"`
}

func NewGetVideoStoreInfosByMD5Response() *GetVideoStoreInfosByMD5Response {
	return &GetVideoStoreInfosByMD5Response{}
}

func (p *GetVideoStoreInfosByMD5Response) GetVideoInfos() []*videoarch_common.VideoStoreInfo {
	return p.VideoInfos
}

var GetVideoStoreInfosByMD5Response_BaseResp_DEFAULT *base.BaseResp

func (p *GetVideoStoreInfosByMD5Response) GetBaseResp() *base.BaseResp {
	if !p.IsSetBaseResp() {
		return GetVideoStoreInfosByMD5Response_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *GetVideoStoreInfosByMD5Response) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *GetVideoStoreInfosByMD5Response) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 255:
			if err := p.ReadField255(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetVideoStoreInfosByMD5Response) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*videoarch_common.VideoStoreInfo, 0, size)
	p.VideoInfos = tSlice
	for i := 0; i < size; i++ {
		_elem20 := &videoarch_common.VideoStoreInfo{}
		if err := _elem20.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem20, err)
		}
		p.VideoInfos = append(p.VideoInfos, _elem20)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *GetVideoStoreInfosByMD5Response) ReadField255(iprot thrift.TProtocol) error {
	p.BaseResp = &base.BaseResp{}
	if err := p.BaseResp.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.BaseResp, err)
	}
	return nil
}

func (p *GetVideoStoreInfosByMD5Response) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetVideoStoreInfosByMD5Response"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField255(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetVideoStoreInfosByMD5Response) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("VideoInfos", thrift.LIST, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:VideoInfos: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.VideoInfos)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.VideoInfos {
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:VideoInfos: %s", p, err)
	}
	return err
}

func (p *GetVideoStoreInfosByMD5Response) writeField255(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		return fmt.Errorf("%T write field begin error 255:BaseResp: %s", p, err)
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.BaseResp, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 255:BaseResp: %s", p, err)
	}
	return err
}

func (p *GetVideoStoreInfosByMD5Response) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetVideoStoreInfosByMD5Response(%+v)", *p)
}
