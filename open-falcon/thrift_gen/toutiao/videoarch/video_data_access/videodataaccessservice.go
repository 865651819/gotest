// Autogenerated by Thrift Compiler (0.9.2)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package video_data_access

import (
	"bytes"
	"code.byted.org/gopkg/thrift"
	"code.byted.org/videoarch/transcoder/thrift_gen/base"
	"code.byted.org/videoarch/transcoder/thrift_gen/videoarch_common"
	"fmt"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var _ = base.GoUnusedProtection__
var _ = videoarch_common.GoUnusedProtection__

type VideoDataAccessService interface {
	// Parameters:
	//  - Req
	CreateVideoInfo(req *CreateVideoInfoRequest) (r *CreateVideoInfoResponse, err error)
	// Parameters:
	//  - Req
	UpdateVideoInfo(req *UpdateVideoInfoRequest) (r *UpdateVideoInfoResponse, err error)
	// Parameters:
	//  - Req
	CreateUploadRecord(req *CreateUploadRecordRequest) (r *CreateUploadRecordResponse, err error)
	// Parameters:
	//  - Req
	UpdateUploadRecord(req *UpdateUploadRecordRequest) (r *UpdateUploadRecordResponse, err error)
	// Parameters:
	//  - Req
	CreateEncodedVideoInfo(req *CreateEncodedVideoInfoRequest) (r *CreateEncodedVideoInfoResponse, err error)
	// Parameters:
	//  - Req
	MGetVideoInfo(req *MGetVideoInfoRequest) (r *MGetVideoInfoResponse, err error)
	// Parameters:
	//  - Req
	MRefreshVideoInfo(req *MRefreshVideoInfoRequest) (r *MRefreshVideoInfoResponse, err error)
	// Parameters:
	//  - Req
	GetProviderInfo(req *GetProviderInfoRequest) (r *GetProviderInfoResponse, err error)
	// Parameters:
	//  - Req
	GetProviderInfoByUserKey(req *GetProviderInfoByUserKeyRequest) (r *GetProviderInfoByUserKeyResponse, err error)
	// Parameters:
	//  - Req
	CreatePosterCandidates(req *CreatePosterCandidatesRequest) (r *CreatePosterCandidatesResponse, err error)
	// Parameters:
	//  - Req
	MGetPosterCandidates(req *MGetPosterCandidatesRequest) (r *MGetPosterCandidatesResponse, err error)
	// Parameters:
	//  - Req
	UpdateVideoExtra(req *UpdateVideoExtraRequest) (r *UpdateVideoExtraResponse, err error)
	// Parameters:
	//  - Req
	MUpdateVideoExtra(req *MUpdateVideoExtraRequest) (r *MUpdateVideoExtraResponse, err error)
	// Parameters:
	//  - Req
	MGetVideoPlayStatus(req *MGetVideoPlayStatusRequest) (r *MGetVideoPlayStatusResponse, err error)
	// Parameters:
	//  - Req
	UpdateVideoPlayStatus(req *UpdateVideoPlayStatusRequest) (r *UpdateVideoPlayStatusResponse, err error)
	// Parameters:
	//  - Req
	UpdateEncodedType(req *UpdateEncodedTypeRequest) (r *UpdateEncodedTypeResponse, err error)
	// Parameters:
	//  - Req
	CreateDynamicLogoInfo(req *CreateDynamicLogoInfoRequest) (r *CreateDynamicLogoInfoResponse, err error)
	// Parameters:
	//  - Req
	GetDynamicLogoInfo(req *GetDynamicLogoInfoRequest) (r *GetDynamicLogoInfoResponse, err error)
	// Parameters:
	//  - Req
	GetVideoStoreInfosByMD5(req *GetVideoStoreInfosByMD5Request) (r *GetVideoStoreInfosByMD5Response, err error)
}

type VideoDataAccessServiceClient struct {
	Transport       thrift.TTransport
	ProtocolFactory thrift.TProtocolFactory
	InputProtocol   thrift.TProtocol
	OutputProtocol  thrift.TProtocol
	SeqId           int32
}

func NewVideoDataAccessServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *VideoDataAccessServiceClient {
	return &VideoDataAccessServiceClient{Transport: t,
		ProtocolFactory: f,
		InputProtocol:   f.GetProtocol(t),
		OutputProtocol:  f.GetProtocol(t),
		SeqId:           0,
	}
}

func NewVideoDataAccessServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *VideoDataAccessServiceClient {
	return &VideoDataAccessServiceClient{Transport: t,
		ProtocolFactory: nil,
		InputProtocol:   iprot,
		OutputProtocol:  oprot,
		SeqId:           0,
	}
}

// Parameters:
//  - Req
func (p *VideoDataAccessServiceClient) CreateVideoInfo(req *CreateVideoInfoRequest) (r *CreateVideoInfoResponse, err error) {
	if err = p.sendCreateVideoInfo(req); err != nil {
		return
	}
	return p.recvCreateVideoInfo()
}

func (p *VideoDataAccessServiceClient) sendCreateVideoInfo(req *CreateVideoInfoRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("CreateVideoInfo", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := CreateVideoInfoArgs{
		Req: req,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *VideoDataAccessServiceClient) recvCreateVideoInfo() (value *CreateVideoInfoResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error21 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error22 error
		error22, err = error21.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error22
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "CreateVideoInfo failed: out of sequence response")
		return
	}
	result := CreateVideoInfoResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
func (p *VideoDataAccessServiceClient) UpdateVideoInfo(req *UpdateVideoInfoRequest) (r *UpdateVideoInfoResponse, err error) {
	if err = p.sendUpdateVideoInfo(req); err != nil {
		return
	}
	return p.recvUpdateVideoInfo()
}

func (p *VideoDataAccessServiceClient) sendUpdateVideoInfo(req *UpdateVideoInfoRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("UpdateVideoInfo", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UpdateVideoInfoArgs{
		Req: req,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *VideoDataAccessServiceClient) recvUpdateVideoInfo() (value *UpdateVideoInfoResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error23 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error24 error
		error24, err = error23.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error24
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "UpdateVideoInfo failed: out of sequence response")
		return
	}
	result := UpdateVideoInfoResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
func (p *VideoDataAccessServiceClient) CreateUploadRecord(req *CreateUploadRecordRequest) (r *CreateUploadRecordResponse, err error) {
	if err = p.sendCreateUploadRecord(req); err != nil {
		return
	}
	return p.recvCreateUploadRecord()
}

func (p *VideoDataAccessServiceClient) sendCreateUploadRecord(req *CreateUploadRecordRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("CreateUploadRecord", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := CreateUploadRecordArgs{
		Req: req,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *VideoDataAccessServiceClient) recvCreateUploadRecord() (value *CreateUploadRecordResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error25 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error26 error
		error26, err = error25.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error26
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "CreateUploadRecord failed: out of sequence response")
		return
	}
	result := CreateUploadRecordResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
func (p *VideoDataAccessServiceClient) UpdateUploadRecord(req *UpdateUploadRecordRequest) (r *UpdateUploadRecordResponse, err error) {
	if err = p.sendUpdateUploadRecord(req); err != nil {
		return
	}
	return p.recvUpdateUploadRecord()
}

func (p *VideoDataAccessServiceClient) sendUpdateUploadRecord(req *UpdateUploadRecordRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("UpdateUploadRecord", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UpdateUploadRecordArgs{
		Req: req,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *VideoDataAccessServiceClient) recvUpdateUploadRecord() (value *UpdateUploadRecordResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error27 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error28 error
		error28, err = error27.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error28
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "UpdateUploadRecord failed: out of sequence response")
		return
	}
	result := UpdateUploadRecordResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
func (p *VideoDataAccessServiceClient) CreateEncodedVideoInfo(req *CreateEncodedVideoInfoRequest) (r *CreateEncodedVideoInfoResponse, err error) {
	if err = p.sendCreateEncodedVideoInfo(req); err != nil {
		return
	}
	return p.recvCreateEncodedVideoInfo()
}

func (p *VideoDataAccessServiceClient) sendCreateEncodedVideoInfo(req *CreateEncodedVideoInfoRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("CreateEncodedVideoInfo", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := CreateEncodedVideoInfoArgs{
		Req: req,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *VideoDataAccessServiceClient) recvCreateEncodedVideoInfo() (value *CreateEncodedVideoInfoResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error29 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error30 error
		error30, err = error29.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error30
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "CreateEncodedVideoInfo failed: out of sequence response")
		return
	}
	result := CreateEncodedVideoInfoResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
func (p *VideoDataAccessServiceClient) MGetVideoInfo(req *MGetVideoInfoRequest) (r *MGetVideoInfoResponse, err error) {
	if err = p.sendMGetVideoInfo(req); err != nil {
		return
	}
	return p.recvMGetVideoInfo()
}

func (p *VideoDataAccessServiceClient) sendMGetVideoInfo(req *MGetVideoInfoRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("MGetVideoInfo", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := MGetVideoInfoArgs{
		Req: req,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *VideoDataAccessServiceClient) recvMGetVideoInfo() (value *MGetVideoInfoResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error31 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error32 error
		error32, err = error31.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error32
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "MGetVideoInfo failed: out of sequence response")
		return
	}
	result := MGetVideoInfoResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
func (p *VideoDataAccessServiceClient) MRefreshVideoInfo(req *MRefreshVideoInfoRequest) (r *MRefreshVideoInfoResponse, err error) {
	if err = p.sendMRefreshVideoInfo(req); err != nil {
		return
	}
	return p.recvMRefreshVideoInfo()
}

func (p *VideoDataAccessServiceClient) sendMRefreshVideoInfo(req *MRefreshVideoInfoRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("MRefreshVideoInfo", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := MRefreshVideoInfoArgs{
		Req: req,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *VideoDataAccessServiceClient) recvMRefreshVideoInfo() (value *MRefreshVideoInfoResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error33 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error34 error
		error34, err = error33.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error34
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "MRefreshVideoInfo failed: out of sequence response")
		return
	}
	result := MRefreshVideoInfoResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
func (p *VideoDataAccessServiceClient) GetProviderInfo(req *GetProviderInfoRequest) (r *GetProviderInfoResponse, err error) {
	if err = p.sendGetProviderInfo(req); err != nil {
		return
	}
	return p.recvGetProviderInfo()
}

func (p *VideoDataAccessServiceClient) sendGetProviderInfo(req *GetProviderInfoRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("GetProviderInfo", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetProviderInfoArgs{
		Req: req,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *VideoDataAccessServiceClient) recvGetProviderInfo() (value *GetProviderInfoResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error35 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error36 error
		error36, err = error35.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error36
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "GetProviderInfo failed: out of sequence response")
		return
	}
	result := GetProviderInfoResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
func (p *VideoDataAccessServiceClient) GetProviderInfoByUserKey(req *GetProviderInfoByUserKeyRequest) (r *GetProviderInfoByUserKeyResponse, err error) {
	if err = p.sendGetProviderInfoByUserKey(req); err != nil {
		return
	}
	return p.recvGetProviderInfoByUserKey()
}

func (p *VideoDataAccessServiceClient) sendGetProviderInfoByUserKey(req *GetProviderInfoByUserKeyRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("GetProviderInfoByUserKey", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetProviderInfoByUserKeyArgs{
		Req: req,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *VideoDataAccessServiceClient) recvGetProviderInfoByUserKey() (value *GetProviderInfoByUserKeyResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error37 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error38 error
		error38, err = error37.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error38
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "GetProviderInfoByUserKey failed: out of sequence response")
		return
	}
	result := GetProviderInfoByUserKeyResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
func (p *VideoDataAccessServiceClient) CreatePosterCandidates(req *CreatePosterCandidatesRequest) (r *CreatePosterCandidatesResponse, err error) {
	if err = p.sendCreatePosterCandidates(req); err != nil {
		return
	}
	return p.recvCreatePosterCandidates()
}

func (p *VideoDataAccessServiceClient) sendCreatePosterCandidates(req *CreatePosterCandidatesRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("CreatePosterCandidates", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := CreatePosterCandidatesArgs{
		Req: req,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *VideoDataAccessServiceClient) recvCreatePosterCandidates() (value *CreatePosterCandidatesResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error39 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error40 error
		error40, err = error39.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error40
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "CreatePosterCandidates failed: out of sequence response")
		return
	}
	result := CreatePosterCandidatesResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
func (p *VideoDataAccessServiceClient) MGetPosterCandidates(req *MGetPosterCandidatesRequest) (r *MGetPosterCandidatesResponse, err error) {
	if err = p.sendMGetPosterCandidates(req); err != nil {
		return
	}
	return p.recvMGetPosterCandidates()
}

func (p *VideoDataAccessServiceClient) sendMGetPosterCandidates(req *MGetPosterCandidatesRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("MGetPosterCandidates", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := MGetPosterCandidatesArgs{
		Req: req,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *VideoDataAccessServiceClient) recvMGetPosterCandidates() (value *MGetPosterCandidatesResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error41 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error42 error
		error42, err = error41.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error42
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "MGetPosterCandidates failed: out of sequence response")
		return
	}
	result := MGetPosterCandidatesResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
func (p *VideoDataAccessServiceClient) UpdateVideoExtra(req *UpdateVideoExtraRequest) (r *UpdateVideoExtraResponse, err error) {
	if err = p.sendUpdateVideoExtra(req); err != nil {
		return
	}
	return p.recvUpdateVideoExtra()
}

func (p *VideoDataAccessServiceClient) sendUpdateVideoExtra(req *UpdateVideoExtraRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("UpdateVideoExtra", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UpdateVideoExtraArgs{
		Req: req,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *VideoDataAccessServiceClient) recvUpdateVideoExtra() (value *UpdateVideoExtraResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error43 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error44 error
		error44, err = error43.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error44
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "UpdateVideoExtra failed: out of sequence response")
		return
	}
	result := UpdateVideoExtraResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
func (p *VideoDataAccessServiceClient) MUpdateVideoExtra(req *MUpdateVideoExtraRequest) (r *MUpdateVideoExtraResponse, err error) {
	if err = p.sendMUpdateVideoExtra(req); err != nil {
		return
	}
	return p.recvMUpdateVideoExtra()
}

func (p *VideoDataAccessServiceClient) sendMUpdateVideoExtra(req *MUpdateVideoExtraRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("MUpdateVideoExtra", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := MUpdateVideoExtraArgs{
		Req: req,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *VideoDataAccessServiceClient) recvMUpdateVideoExtra() (value *MUpdateVideoExtraResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error45 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error46 error
		error46, err = error45.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error46
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "MUpdateVideoExtra failed: out of sequence response")
		return
	}
	result := MUpdateVideoExtraResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
func (p *VideoDataAccessServiceClient) MGetVideoPlayStatus(req *MGetVideoPlayStatusRequest) (r *MGetVideoPlayStatusResponse, err error) {
	if err = p.sendMGetVideoPlayStatus(req); err != nil {
		return
	}
	return p.recvMGetVideoPlayStatus()
}

func (p *VideoDataAccessServiceClient) sendMGetVideoPlayStatus(req *MGetVideoPlayStatusRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("MGetVideoPlayStatus", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := MGetVideoPlayStatusArgs{
		Req: req,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *VideoDataAccessServiceClient) recvMGetVideoPlayStatus() (value *MGetVideoPlayStatusResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error47 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error48 error
		error48, err = error47.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error48
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "MGetVideoPlayStatus failed: out of sequence response")
		return
	}
	result := MGetVideoPlayStatusResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
func (p *VideoDataAccessServiceClient) UpdateVideoPlayStatus(req *UpdateVideoPlayStatusRequest) (r *UpdateVideoPlayStatusResponse, err error) {
	if err = p.sendUpdateVideoPlayStatus(req); err != nil {
		return
	}
	return p.recvUpdateVideoPlayStatus()
}

func (p *VideoDataAccessServiceClient) sendUpdateVideoPlayStatus(req *UpdateVideoPlayStatusRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("UpdateVideoPlayStatus", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UpdateVideoPlayStatusArgs{
		Req: req,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *VideoDataAccessServiceClient) recvUpdateVideoPlayStatus() (value *UpdateVideoPlayStatusResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error49 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error50 error
		error50, err = error49.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error50
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "UpdateVideoPlayStatus failed: out of sequence response")
		return
	}
	result := UpdateVideoPlayStatusResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
func (p *VideoDataAccessServiceClient) UpdateEncodedType(req *UpdateEncodedTypeRequest) (r *UpdateEncodedTypeResponse, err error) {
	if err = p.sendUpdateEncodedType(req); err != nil {
		return
	}
	return p.recvUpdateEncodedType()
}

func (p *VideoDataAccessServiceClient) sendUpdateEncodedType(req *UpdateEncodedTypeRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("UpdateEncodedType", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UpdateEncodedTypeArgs{
		Req: req,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *VideoDataAccessServiceClient) recvUpdateEncodedType() (value *UpdateEncodedTypeResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error51 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error52 error
		error52, err = error51.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error52
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "UpdateEncodedType failed: out of sequence response")
		return
	}
	result := UpdateEncodedTypeResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
func (p *VideoDataAccessServiceClient) CreateDynamicLogoInfo(req *CreateDynamicLogoInfoRequest) (r *CreateDynamicLogoInfoResponse, err error) {
	if err = p.sendCreateDynamicLogoInfo(req); err != nil {
		return
	}
	return p.recvCreateDynamicLogoInfo()
}

func (p *VideoDataAccessServiceClient) sendCreateDynamicLogoInfo(req *CreateDynamicLogoInfoRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("CreateDynamicLogoInfo", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := CreateDynamicLogoInfoArgs{
		Req: req,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *VideoDataAccessServiceClient) recvCreateDynamicLogoInfo() (value *CreateDynamicLogoInfoResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error53 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error54 error
		error54, err = error53.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error54
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "CreateDynamicLogoInfo failed: out of sequence response")
		return
	}
	result := CreateDynamicLogoInfoResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
func (p *VideoDataAccessServiceClient) GetDynamicLogoInfo(req *GetDynamicLogoInfoRequest) (r *GetDynamicLogoInfoResponse, err error) {
	if err = p.sendGetDynamicLogoInfo(req); err != nil {
		return
	}
	return p.recvGetDynamicLogoInfo()
}

func (p *VideoDataAccessServiceClient) sendGetDynamicLogoInfo(req *GetDynamicLogoInfoRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("GetDynamicLogoInfo", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetDynamicLogoInfoArgs{
		Req: req,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *VideoDataAccessServiceClient) recvGetDynamicLogoInfo() (value *GetDynamicLogoInfoResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error55 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error56 error
		error56, err = error55.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error56
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "GetDynamicLogoInfo failed: out of sequence response")
		return
	}
	result := GetDynamicLogoInfoResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
func (p *VideoDataAccessServiceClient) GetVideoStoreInfosByMD5(req *GetVideoStoreInfosByMD5Request) (r *GetVideoStoreInfosByMD5Response, err error) {
	if err = p.sendGetVideoStoreInfosByMD5(req); err != nil {
		return
	}
	return p.recvGetVideoStoreInfosByMD5()
}

func (p *VideoDataAccessServiceClient) sendGetVideoStoreInfosByMD5(req *GetVideoStoreInfosByMD5Request) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("GetVideoStoreInfosByMD5", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetVideoStoreInfosByMD5Args{
		Req: req,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *VideoDataAccessServiceClient) recvGetVideoStoreInfosByMD5() (value *GetVideoStoreInfosByMD5Response, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error57 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error58 error
		error58, err = error57.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error58
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "GetVideoStoreInfosByMD5 failed: out of sequence response")
		return
	}
	result := GetVideoStoreInfosByMD5Result{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

type VideoDataAccessServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      VideoDataAccessService
}

func (p *VideoDataAccessServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *VideoDataAccessServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *VideoDataAccessServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewVideoDataAccessServiceProcessor(handler VideoDataAccessService) *VideoDataAccessServiceProcessor {

	self59 := &VideoDataAccessServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self59.processorMap["CreateVideoInfo"] = &videoDataAccessServiceProcessorCreateVideoInfo{handler: handler}
	self59.processorMap["UpdateVideoInfo"] = &videoDataAccessServiceProcessorUpdateVideoInfo{handler: handler}
	self59.processorMap["CreateUploadRecord"] = &videoDataAccessServiceProcessorCreateUploadRecord{handler: handler}
	self59.processorMap["UpdateUploadRecord"] = &videoDataAccessServiceProcessorUpdateUploadRecord{handler: handler}
	self59.processorMap["CreateEncodedVideoInfo"] = &videoDataAccessServiceProcessorCreateEncodedVideoInfo{handler: handler}
	self59.processorMap["MGetVideoInfo"] = &videoDataAccessServiceProcessorMGetVideoInfo{handler: handler}
	self59.processorMap["MRefreshVideoInfo"] = &videoDataAccessServiceProcessorMRefreshVideoInfo{handler: handler}
	self59.processorMap["GetProviderInfo"] = &videoDataAccessServiceProcessorGetProviderInfo{handler: handler}
	self59.processorMap["GetProviderInfoByUserKey"] = &videoDataAccessServiceProcessorGetProviderInfoByUserKey{handler: handler}
	self59.processorMap["CreatePosterCandidates"] = &videoDataAccessServiceProcessorCreatePosterCandidates{handler: handler}
	self59.processorMap["MGetPosterCandidates"] = &videoDataAccessServiceProcessorMGetPosterCandidates{handler: handler}
	self59.processorMap["UpdateVideoExtra"] = &videoDataAccessServiceProcessorUpdateVideoExtra{handler: handler}
	self59.processorMap["MUpdateVideoExtra"] = &videoDataAccessServiceProcessorMUpdateVideoExtra{handler: handler}
	self59.processorMap["MGetVideoPlayStatus"] = &videoDataAccessServiceProcessorMGetVideoPlayStatus{handler: handler}
	self59.processorMap["UpdateVideoPlayStatus"] = &videoDataAccessServiceProcessorUpdateVideoPlayStatus{handler: handler}
	self59.processorMap["UpdateEncodedType"] = &videoDataAccessServiceProcessorUpdateEncodedType{handler: handler}
	self59.processorMap["CreateDynamicLogoInfo"] = &videoDataAccessServiceProcessorCreateDynamicLogoInfo{handler: handler}
	self59.processorMap["GetDynamicLogoInfo"] = &videoDataAccessServiceProcessorGetDynamicLogoInfo{handler: handler}
	self59.processorMap["GetVideoStoreInfosByMD5"] = &videoDataAccessServiceProcessorGetVideoStoreInfosByMD5{handler: handler}
	return self59
}

func (p *VideoDataAccessServiceProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x60 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x60.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return false, x60

}

type videoDataAccessServiceProcessorCreateVideoInfo struct {
	handler VideoDataAccessService
}

func (p *videoDataAccessServiceProcessorCreateVideoInfo) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CreateVideoInfoArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CreateVideoInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := CreateVideoInfoResult{}
	var retval *CreateVideoInfoResponse
	var err2 error
	if retval, err2 = p.handler.CreateVideoInfo(args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CreateVideoInfo: "+err2.Error())
		oprot.WriteMessageBegin("CreateVideoInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CreateVideoInfo", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type videoDataAccessServiceProcessorUpdateVideoInfo struct {
	handler VideoDataAccessService
}

func (p *videoDataAccessServiceProcessorUpdateVideoInfo) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UpdateVideoInfoArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdateVideoInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UpdateVideoInfoResult{}
	var retval *UpdateVideoInfoResponse
	var err2 error
	if retval, err2 = p.handler.UpdateVideoInfo(args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateVideoInfo: "+err2.Error())
		oprot.WriteMessageBegin("UpdateVideoInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpdateVideoInfo", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type videoDataAccessServiceProcessorCreateUploadRecord struct {
	handler VideoDataAccessService
}

func (p *videoDataAccessServiceProcessorCreateUploadRecord) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CreateUploadRecordArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CreateUploadRecord", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := CreateUploadRecordResult{}
	var retval *CreateUploadRecordResponse
	var err2 error
	if retval, err2 = p.handler.CreateUploadRecord(args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CreateUploadRecord: "+err2.Error())
		oprot.WriteMessageBegin("CreateUploadRecord", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CreateUploadRecord", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type videoDataAccessServiceProcessorUpdateUploadRecord struct {
	handler VideoDataAccessService
}

func (p *videoDataAccessServiceProcessorUpdateUploadRecord) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UpdateUploadRecordArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdateUploadRecord", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UpdateUploadRecordResult{}
	var retval *UpdateUploadRecordResponse
	var err2 error
	if retval, err2 = p.handler.UpdateUploadRecord(args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateUploadRecord: "+err2.Error())
		oprot.WriteMessageBegin("UpdateUploadRecord", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpdateUploadRecord", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type videoDataAccessServiceProcessorCreateEncodedVideoInfo struct {
	handler VideoDataAccessService
}

func (p *videoDataAccessServiceProcessorCreateEncodedVideoInfo) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CreateEncodedVideoInfoArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CreateEncodedVideoInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := CreateEncodedVideoInfoResult{}
	var retval *CreateEncodedVideoInfoResponse
	var err2 error
	if retval, err2 = p.handler.CreateEncodedVideoInfo(args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CreateEncodedVideoInfo: "+err2.Error())
		oprot.WriteMessageBegin("CreateEncodedVideoInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CreateEncodedVideoInfo", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type videoDataAccessServiceProcessorMGetVideoInfo struct {
	handler VideoDataAccessService
}

func (p *videoDataAccessServiceProcessorMGetVideoInfo) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MGetVideoInfoArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("MGetVideoInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := MGetVideoInfoResult{}
	var retval *MGetVideoInfoResponse
	var err2 error
	if retval, err2 = p.handler.MGetVideoInfo(args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing MGetVideoInfo: "+err2.Error())
		oprot.WriteMessageBegin("MGetVideoInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("MGetVideoInfo", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type videoDataAccessServiceProcessorMRefreshVideoInfo struct {
	handler VideoDataAccessService
}

func (p *videoDataAccessServiceProcessorMRefreshVideoInfo) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MRefreshVideoInfoArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("MRefreshVideoInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := MRefreshVideoInfoResult{}
	var retval *MRefreshVideoInfoResponse
	var err2 error
	if retval, err2 = p.handler.MRefreshVideoInfo(args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing MRefreshVideoInfo: "+err2.Error())
		oprot.WriteMessageBegin("MRefreshVideoInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("MRefreshVideoInfo", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type videoDataAccessServiceProcessorGetProviderInfo struct {
	handler VideoDataAccessService
}

func (p *videoDataAccessServiceProcessorGetProviderInfo) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetProviderInfoArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetProviderInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetProviderInfoResult{}
	var retval *GetProviderInfoResponse
	var err2 error
	if retval, err2 = p.handler.GetProviderInfo(args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetProviderInfo: "+err2.Error())
		oprot.WriteMessageBegin("GetProviderInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetProviderInfo", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type videoDataAccessServiceProcessorGetProviderInfoByUserKey struct {
	handler VideoDataAccessService
}

func (p *videoDataAccessServiceProcessorGetProviderInfoByUserKey) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetProviderInfoByUserKeyArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetProviderInfoByUserKey", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetProviderInfoByUserKeyResult{}
	var retval *GetProviderInfoByUserKeyResponse
	var err2 error
	if retval, err2 = p.handler.GetProviderInfoByUserKey(args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetProviderInfoByUserKey: "+err2.Error())
		oprot.WriteMessageBegin("GetProviderInfoByUserKey", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetProviderInfoByUserKey", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type videoDataAccessServiceProcessorCreatePosterCandidates struct {
	handler VideoDataAccessService
}

func (p *videoDataAccessServiceProcessorCreatePosterCandidates) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CreatePosterCandidatesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CreatePosterCandidates", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := CreatePosterCandidatesResult{}
	var retval *CreatePosterCandidatesResponse
	var err2 error
	if retval, err2 = p.handler.CreatePosterCandidates(args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CreatePosterCandidates: "+err2.Error())
		oprot.WriteMessageBegin("CreatePosterCandidates", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CreatePosterCandidates", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type videoDataAccessServiceProcessorMGetPosterCandidates struct {
	handler VideoDataAccessService
}

func (p *videoDataAccessServiceProcessorMGetPosterCandidates) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MGetPosterCandidatesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("MGetPosterCandidates", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := MGetPosterCandidatesResult{}
	var retval *MGetPosterCandidatesResponse
	var err2 error
	if retval, err2 = p.handler.MGetPosterCandidates(args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing MGetPosterCandidates: "+err2.Error())
		oprot.WriteMessageBegin("MGetPosterCandidates", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("MGetPosterCandidates", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type videoDataAccessServiceProcessorUpdateVideoExtra struct {
	handler VideoDataAccessService
}

func (p *videoDataAccessServiceProcessorUpdateVideoExtra) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UpdateVideoExtraArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdateVideoExtra", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UpdateVideoExtraResult{}
	var retval *UpdateVideoExtraResponse
	var err2 error
	if retval, err2 = p.handler.UpdateVideoExtra(args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateVideoExtra: "+err2.Error())
		oprot.WriteMessageBegin("UpdateVideoExtra", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpdateVideoExtra", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type videoDataAccessServiceProcessorMUpdateVideoExtra struct {
	handler VideoDataAccessService
}

func (p *videoDataAccessServiceProcessorMUpdateVideoExtra) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MUpdateVideoExtraArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("MUpdateVideoExtra", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := MUpdateVideoExtraResult{}
	var retval *MUpdateVideoExtraResponse
	var err2 error
	if retval, err2 = p.handler.MUpdateVideoExtra(args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing MUpdateVideoExtra: "+err2.Error())
		oprot.WriteMessageBegin("MUpdateVideoExtra", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("MUpdateVideoExtra", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type videoDataAccessServiceProcessorMGetVideoPlayStatus struct {
	handler VideoDataAccessService
}

func (p *videoDataAccessServiceProcessorMGetVideoPlayStatus) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MGetVideoPlayStatusArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("MGetVideoPlayStatus", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := MGetVideoPlayStatusResult{}
	var retval *MGetVideoPlayStatusResponse
	var err2 error
	if retval, err2 = p.handler.MGetVideoPlayStatus(args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing MGetVideoPlayStatus: "+err2.Error())
		oprot.WriteMessageBegin("MGetVideoPlayStatus", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("MGetVideoPlayStatus", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type videoDataAccessServiceProcessorUpdateVideoPlayStatus struct {
	handler VideoDataAccessService
}

func (p *videoDataAccessServiceProcessorUpdateVideoPlayStatus) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UpdateVideoPlayStatusArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdateVideoPlayStatus", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UpdateVideoPlayStatusResult{}
	var retval *UpdateVideoPlayStatusResponse
	var err2 error
	if retval, err2 = p.handler.UpdateVideoPlayStatus(args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateVideoPlayStatus: "+err2.Error())
		oprot.WriteMessageBegin("UpdateVideoPlayStatus", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpdateVideoPlayStatus", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type videoDataAccessServiceProcessorUpdateEncodedType struct {
	handler VideoDataAccessService
}

func (p *videoDataAccessServiceProcessorUpdateEncodedType) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UpdateEncodedTypeArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdateEncodedType", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UpdateEncodedTypeResult{}
	var retval *UpdateEncodedTypeResponse
	var err2 error
	if retval, err2 = p.handler.UpdateEncodedType(args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateEncodedType: "+err2.Error())
		oprot.WriteMessageBegin("UpdateEncodedType", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpdateEncodedType", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type videoDataAccessServiceProcessorCreateDynamicLogoInfo struct {
	handler VideoDataAccessService
}

func (p *videoDataAccessServiceProcessorCreateDynamicLogoInfo) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CreateDynamicLogoInfoArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CreateDynamicLogoInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := CreateDynamicLogoInfoResult{}
	var retval *CreateDynamicLogoInfoResponse
	var err2 error
	if retval, err2 = p.handler.CreateDynamicLogoInfo(args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CreateDynamicLogoInfo: "+err2.Error())
		oprot.WriteMessageBegin("CreateDynamicLogoInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CreateDynamicLogoInfo", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type videoDataAccessServiceProcessorGetDynamicLogoInfo struct {
	handler VideoDataAccessService
}

func (p *videoDataAccessServiceProcessorGetDynamicLogoInfo) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetDynamicLogoInfoArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetDynamicLogoInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetDynamicLogoInfoResult{}
	var retval *GetDynamicLogoInfoResponse
	var err2 error
	if retval, err2 = p.handler.GetDynamicLogoInfo(args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetDynamicLogoInfo: "+err2.Error())
		oprot.WriteMessageBegin("GetDynamicLogoInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetDynamicLogoInfo", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type videoDataAccessServiceProcessorGetVideoStoreInfosByMD5 struct {
	handler VideoDataAccessService
}

func (p *videoDataAccessServiceProcessorGetVideoStoreInfosByMD5) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetVideoStoreInfosByMD5Args{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetVideoStoreInfosByMD5", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetVideoStoreInfosByMD5Result{}
	var retval *GetVideoStoreInfosByMD5Response
	var err2 error
	if retval, err2 = p.handler.GetVideoStoreInfosByMD5(args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetVideoStoreInfosByMD5: "+err2.Error())
		oprot.WriteMessageBegin("GetVideoStoreInfosByMD5", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetVideoStoreInfosByMD5", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

type CreateVideoInfoArgs struct {
	Req *CreateVideoInfoRequest `thrift:"req,1" json:"req"`
}

func NewCreateVideoInfoArgs() *CreateVideoInfoArgs {
	return &CreateVideoInfoArgs{}
}

var CreateVideoInfoArgs_Req_DEFAULT *CreateVideoInfoRequest

func (p *CreateVideoInfoArgs) GetReq() *CreateVideoInfoRequest {
	if !p.IsSetReq() {
		return CreateVideoInfoArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *CreateVideoInfoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CreateVideoInfoArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CreateVideoInfoArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &CreateVideoInfoRequest{}
	if err := p.Req.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Req, err)
	}
	return nil
}

func (p *CreateVideoInfoArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("CreateVideoInfo_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *CreateVideoInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:req: %s", p, err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Req, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:req: %s", p, err)
	}
	return err
}

func (p *CreateVideoInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateVideoInfoArgs(%+v)", *p)
}

type CreateVideoInfoResult struct {
	Success *CreateVideoInfoResponse `thrift:"success,0" json:"success"`
}

func NewCreateVideoInfoResult() *CreateVideoInfoResult {
	return &CreateVideoInfoResult{}
}

var CreateVideoInfoResult_Success_DEFAULT *CreateVideoInfoResponse

func (p *CreateVideoInfoResult) GetSuccess() *CreateVideoInfoResponse {
	if !p.IsSetSuccess() {
		return CreateVideoInfoResult_Success_DEFAULT
	}
	return p.Success
}
func (p *CreateVideoInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CreateVideoInfoResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CreateVideoInfoResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &CreateVideoInfoResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *CreateVideoInfoResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("CreateVideoInfo_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *CreateVideoInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *CreateVideoInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateVideoInfoResult(%+v)", *p)
}

type UpdateVideoInfoArgs struct {
	Req *UpdateVideoInfoRequest `thrift:"req,1" json:"req"`
}

func NewUpdateVideoInfoArgs() *UpdateVideoInfoArgs {
	return &UpdateVideoInfoArgs{}
}

var UpdateVideoInfoArgs_Req_DEFAULT *UpdateVideoInfoRequest

func (p *UpdateVideoInfoArgs) GetReq() *UpdateVideoInfoRequest {
	if !p.IsSetReq() {
		return UpdateVideoInfoArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *UpdateVideoInfoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UpdateVideoInfoArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *UpdateVideoInfoArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &UpdateVideoInfoRequest{}
	if err := p.Req.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Req, err)
	}
	return nil
}

func (p *UpdateVideoInfoArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UpdateVideoInfo_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *UpdateVideoInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:req: %s", p, err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Req, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:req: %s", p, err)
	}
	return err
}

func (p *UpdateVideoInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateVideoInfoArgs(%+v)", *p)
}

type UpdateVideoInfoResult struct {
	Success *UpdateVideoInfoResponse `thrift:"success,0" json:"success"`
}

func NewUpdateVideoInfoResult() *UpdateVideoInfoResult {
	return &UpdateVideoInfoResult{}
}

var UpdateVideoInfoResult_Success_DEFAULT *UpdateVideoInfoResponse

func (p *UpdateVideoInfoResult) GetSuccess() *UpdateVideoInfoResponse {
	if !p.IsSetSuccess() {
		return UpdateVideoInfoResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UpdateVideoInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UpdateVideoInfoResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *UpdateVideoInfoResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &UpdateVideoInfoResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *UpdateVideoInfoResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UpdateVideoInfo_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *UpdateVideoInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *UpdateVideoInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateVideoInfoResult(%+v)", *p)
}

type CreateUploadRecordArgs struct {
	Req *CreateUploadRecordRequest `thrift:"req,1" json:"req"`
}

func NewCreateUploadRecordArgs() *CreateUploadRecordArgs {
	return &CreateUploadRecordArgs{}
}

var CreateUploadRecordArgs_Req_DEFAULT *CreateUploadRecordRequest

func (p *CreateUploadRecordArgs) GetReq() *CreateUploadRecordRequest {
	if !p.IsSetReq() {
		return CreateUploadRecordArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *CreateUploadRecordArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CreateUploadRecordArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CreateUploadRecordArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &CreateUploadRecordRequest{}
	if err := p.Req.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Req, err)
	}
	return nil
}

func (p *CreateUploadRecordArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("CreateUploadRecord_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *CreateUploadRecordArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:req: %s", p, err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Req, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:req: %s", p, err)
	}
	return err
}

func (p *CreateUploadRecordArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateUploadRecordArgs(%+v)", *p)
}

type CreateUploadRecordResult struct {
	Success *CreateUploadRecordResponse `thrift:"success,0" json:"success"`
}

func NewCreateUploadRecordResult() *CreateUploadRecordResult {
	return &CreateUploadRecordResult{}
}

var CreateUploadRecordResult_Success_DEFAULT *CreateUploadRecordResponse

func (p *CreateUploadRecordResult) GetSuccess() *CreateUploadRecordResponse {
	if !p.IsSetSuccess() {
		return CreateUploadRecordResult_Success_DEFAULT
	}
	return p.Success
}
func (p *CreateUploadRecordResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CreateUploadRecordResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CreateUploadRecordResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &CreateUploadRecordResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *CreateUploadRecordResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("CreateUploadRecord_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *CreateUploadRecordResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *CreateUploadRecordResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateUploadRecordResult(%+v)", *p)
}

type UpdateUploadRecordArgs struct {
	Req *UpdateUploadRecordRequest `thrift:"req,1" json:"req"`
}

func NewUpdateUploadRecordArgs() *UpdateUploadRecordArgs {
	return &UpdateUploadRecordArgs{}
}

var UpdateUploadRecordArgs_Req_DEFAULT *UpdateUploadRecordRequest

func (p *UpdateUploadRecordArgs) GetReq() *UpdateUploadRecordRequest {
	if !p.IsSetReq() {
		return UpdateUploadRecordArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *UpdateUploadRecordArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UpdateUploadRecordArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *UpdateUploadRecordArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &UpdateUploadRecordRequest{}
	if err := p.Req.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Req, err)
	}
	return nil
}

func (p *UpdateUploadRecordArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UpdateUploadRecord_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *UpdateUploadRecordArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:req: %s", p, err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Req, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:req: %s", p, err)
	}
	return err
}

func (p *UpdateUploadRecordArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateUploadRecordArgs(%+v)", *p)
}

type UpdateUploadRecordResult struct {
	Success *UpdateUploadRecordResponse `thrift:"success,0" json:"success"`
}

func NewUpdateUploadRecordResult() *UpdateUploadRecordResult {
	return &UpdateUploadRecordResult{}
}

var UpdateUploadRecordResult_Success_DEFAULT *UpdateUploadRecordResponse

func (p *UpdateUploadRecordResult) GetSuccess() *UpdateUploadRecordResponse {
	if !p.IsSetSuccess() {
		return UpdateUploadRecordResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UpdateUploadRecordResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UpdateUploadRecordResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *UpdateUploadRecordResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &UpdateUploadRecordResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *UpdateUploadRecordResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UpdateUploadRecord_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *UpdateUploadRecordResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *UpdateUploadRecordResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateUploadRecordResult(%+v)", *p)
}

type CreateEncodedVideoInfoArgs struct {
	Req *CreateEncodedVideoInfoRequest `thrift:"req,1" json:"req"`
}

func NewCreateEncodedVideoInfoArgs() *CreateEncodedVideoInfoArgs {
	return &CreateEncodedVideoInfoArgs{}
}

var CreateEncodedVideoInfoArgs_Req_DEFAULT *CreateEncodedVideoInfoRequest

func (p *CreateEncodedVideoInfoArgs) GetReq() *CreateEncodedVideoInfoRequest {
	if !p.IsSetReq() {
		return CreateEncodedVideoInfoArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *CreateEncodedVideoInfoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CreateEncodedVideoInfoArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CreateEncodedVideoInfoArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &CreateEncodedVideoInfoRequest{}
	if err := p.Req.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Req, err)
	}
	return nil
}

func (p *CreateEncodedVideoInfoArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("CreateEncodedVideoInfo_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *CreateEncodedVideoInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:req: %s", p, err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Req, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:req: %s", p, err)
	}
	return err
}

func (p *CreateEncodedVideoInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateEncodedVideoInfoArgs(%+v)", *p)
}

type CreateEncodedVideoInfoResult struct {
	Success *CreateEncodedVideoInfoResponse `thrift:"success,0" json:"success"`
}

func NewCreateEncodedVideoInfoResult() *CreateEncodedVideoInfoResult {
	return &CreateEncodedVideoInfoResult{}
}

var CreateEncodedVideoInfoResult_Success_DEFAULT *CreateEncodedVideoInfoResponse

func (p *CreateEncodedVideoInfoResult) GetSuccess() *CreateEncodedVideoInfoResponse {
	if !p.IsSetSuccess() {
		return CreateEncodedVideoInfoResult_Success_DEFAULT
	}
	return p.Success
}
func (p *CreateEncodedVideoInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CreateEncodedVideoInfoResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CreateEncodedVideoInfoResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &CreateEncodedVideoInfoResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *CreateEncodedVideoInfoResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("CreateEncodedVideoInfo_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *CreateEncodedVideoInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *CreateEncodedVideoInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateEncodedVideoInfoResult(%+v)", *p)
}

type MGetVideoInfoArgs struct {
	Req *MGetVideoInfoRequest `thrift:"req,1" json:"req"`
}

func NewMGetVideoInfoArgs() *MGetVideoInfoArgs {
	return &MGetVideoInfoArgs{}
}

var MGetVideoInfoArgs_Req_DEFAULT *MGetVideoInfoRequest

func (p *MGetVideoInfoArgs) GetReq() *MGetVideoInfoRequest {
	if !p.IsSetReq() {
		return MGetVideoInfoArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *MGetVideoInfoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MGetVideoInfoArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *MGetVideoInfoArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &MGetVideoInfoRequest{
		NeedVideoFileInfo: true,

		NeedEncodedVideoInfo: true,
	}
	if err := p.Req.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Req, err)
	}
	return nil
}

func (p *MGetVideoInfoArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("MGetVideoInfo_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *MGetVideoInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:req: %s", p, err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Req, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:req: %s", p, err)
	}
	return err
}

func (p *MGetVideoInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MGetVideoInfoArgs(%+v)", *p)
}

type MGetVideoInfoResult struct {
	Success *MGetVideoInfoResponse `thrift:"success,0" json:"success"`
}

func NewMGetVideoInfoResult() *MGetVideoInfoResult {
	return &MGetVideoInfoResult{}
}

var MGetVideoInfoResult_Success_DEFAULT *MGetVideoInfoResponse

func (p *MGetVideoInfoResult) GetSuccess() *MGetVideoInfoResponse {
	if !p.IsSetSuccess() {
		return MGetVideoInfoResult_Success_DEFAULT
	}
	return p.Success
}
func (p *MGetVideoInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MGetVideoInfoResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *MGetVideoInfoResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &MGetVideoInfoResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *MGetVideoInfoResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("MGetVideoInfo_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *MGetVideoInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *MGetVideoInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MGetVideoInfoResult(%+v)", *p)
}

type MRefreshVideoInfoArgs struct {
	Req *MRefreshVideoInfoRequest `thrift:"req,1" json:"req"`
}

func NewMRefreshVideoInfoArgs() *MRefreshVideoInfoArgs {
	return &MRefreshVideoInfoArgs{}
}

var MRefreshVideoInfoArgs_Req_DEFAULT *MRefreshVideoInfoRequest

func (p *MRefreshVideoInfoArgs) GetReq() *MRefreshVideoInfoRequest {
	if !p.IsSetReq() {
		return MRefreshVideoInfoArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *MRefreshVideoInfoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MRefreshVideoInfoArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *MRefreshVideoInfoArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &MRefreshVideoInfoRequest{}
	if err := p.Req.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Req, err)
	}
	return nil
}

func (p *MRefreshVideoInfoArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("MRefreshVideoInfo_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *MRefreshVideoInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:req: %s", p, err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Req, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:req: %s", p, err)
	}
	return err
}

func (p *MRefreshVideoInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MRefreshVideoInfoArgs(%+v)", *p)
}

type MRefreshVideoInfoResult struct {
	Success *MRefreshVideoInfoResponse `thrift:"success,0" json:"success"`
}

func NewMRefreshVideoInfoResult() *MRefreshVideoInfoResult {
	return &MRefreshVideoInfoResult{}
}

var MRefreshVideoInfoResult_Success_DEFAULT *MRefreshVideoInfoResponse

func (p *MRefreshVideoInfoResult) GetSuccess() *MRefreshVideoInfoResponse {
	if !p.IsSetSuccess() {
		return MRefreshVideoInfoResult_Success_DEFAULT
	}
	return p.Success
}
func (p *MRefreshVideoInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MRefreshVideoInfoResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *MRefreshVideoInfoResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &MRefreshVideoInfoResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *MRefreshVideoInfoResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("MRefreshVideoInfo_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *MRefreshVideoInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *MRefreshVideoInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MRefreshVideoInfoResult(%+v)", *p)
}

type GetProviderInfoArgs struct {
	Req *GetProviderInfoRequest `thrift:"req,1" json:"req"`
}

func NewGetProviderInfoArgs() *GetProviderInfoArgs {
	return &GetProviderInfoArgs{}
}

var GetProviderInfoArgs_Req_DEFAULT *GetProviderInfoRequest

func (p *GetProviderInfoArgs) GetReq() *GetProviderInfoRequest {
	if !p.IsSetReq() {
		return GetProviderInfoArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *GetProviderInfoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetProviderInfoArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetProviderInfoArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &GetProviderInfoRequest{}
	if err := p.Req.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Req, err)
	}
	return nil
}

func (p *GetProviderInfoArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetProviderInfo_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetProviderInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:req: %s", p, err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Req, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:req: %s", p, err)
	}
	return err
}

func (p *GetProviderInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetProviderInfoArgs(%+v)", *p)
}

type GetProviderInfoResult struct {
	Success *GetProviderInfoResponse `thrift:"success,0" json:"success"`
}

func NewGetProviderInfoResult() *GetProviderInfoResult {
	return &GetProviderInfoResult{}
}

var GetProviderInfoResult_Success_DEFAULT *GetProviderInfoResponse

func (p *GetProviderInfoResult) GetSuccess() *GetProviderInfoResponse {
	if !p.IsSetSuccess() {
		return GetProviderInfoResult_Success_DEFAULT
	}
	return p.Success
}
func (p *GetProviderInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetProviderInfoResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetProviderInfoResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &GetProviderInfoResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *GetProviderInfoResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetProviderInfo_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetProviderInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetProviderInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetProviderInfoResult(%+v)", *p)
}

type GetProviderInfoByUserKeyArgs struct {
	Req *GetProviderInfoByUserKeyRequest `thrift:"req,1" json:"req"`
}

func NewGetProviderInfoByUserKeyArgs() *GetProviderInfoByUserKeyArgs {
	return &GetProviderInfoByUserKeyArgs{}
}

var GetProviderInfoByUserKeyArgs_Req_DEFAULT *GetProviderInfoByUserKeyRequest

func (p *GetProviderInfoByUserKeyArgs) GetReq() *GetProviderInfoByUserKeyRequest {
	if !p.IsSetReq() {
		return GetProviderInfoByUserKeyArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *GetProviderInfoByUserKeyArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetProviderInfoByUserKeyArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetProviderInfoByUserKeyArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &GetProviderInfoByUserKeyRequest{}
	if err := p.Req.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Req, err)
	}
	return nil
}

func (p *GetProviderInfoByUserKeyArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetProviderInfoByUserKey_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetProviderInfoByUserKeyArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:req: %s", p, err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Req, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:req: %s", p, err)
	}
	return err
}

func (p *GetProviderInfoByUserKeyArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetProviderInfoByUserKeyArgs(%+v)", *p)
}

type GetProviderInfoByUserKeyResult struct {
	Success *GetProviderInfoByUserKeyResponse `thrift:"success,0" json:"success"`
}

func NewGetProviderInfoByUserKeyResult() *GetProviderInfoByUserKeyResult {
	return &GetProviderInfoByUserKeyResult{}
}

var GetProviderInfoByUserKeyResult_Success_DEFAULT *GetProviderInfoByUserKeyResponse

func (p *GetProviderInfoByUserKeyResult) GetSuccess() *GetProviderInfoByUserKeyResponse {
	if !p.IsSetSuccess() {
		return GetProviderInfoByUserKeyResult_Success_DEFAULT
	}
	return p.Success
}
func (p *GetProviderInfoByUserKeyResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetProviderInfoByUserKeyResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetProviderInfoByUserKeyResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &GetProviderInfoByUserKeyResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *GetProviderInfoByUserKeyResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetProviderInfoByUserKey_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetProviderInfoByUserKeyResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetProviderInfoByUserKeyResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetProviderInfoByUserKeyResult(%+v)", *p)
}

type CreatePosterCandidatesArgs struct {
	Req *CreatePosterCandidatesRequest `thrift:"req,1" json:"req"`
}

func NewCreatePosterCandidatesArgs() *CreatePosterCandidatesArgs {
	return &CreatePosterCandidatesArgs{}
}

var CreatePosterCandidatesArgs_Req_DEFAULT *CreatePosterCandidatesRequest

func (p *CreatePosterCandidatesArgs) GetReq() *CreatePosterCandidatesRequest {
	if !p.IsSetReq() {
		return CreatePosterCandidatesArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *CreatePosterCandidatesArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CreatePosterCandidatesArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CreatePosterCandidatesArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &CreatePosterCandidatesRequest{}
	if err := p.Req.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Req, err)
	}
	return nil
}

func (p *CreatePosterCandidatesArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("CreatePosterCandidates_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *CreatePosterCandidatesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:req: %s", p, err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Req, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:req: %s", p, err)
	}
	return err
}

func (p *CreatePosterCandidatesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreatePosterCandidatesArgs(%+v)", *p)
}

type CreatePosterCandidatesResult struct {
	Success *CreatePosterCandidatesResponse `thrift:"success,0" json:"success"`
}

func NewCreatePosterCandidatesResult() *CreatePosterCandidatesResult {
	return &CreatePosterCandidatesResult{}
}

var CreatePosterCandidatesResult_Success_DEFAULT *CreatePosterCandidatesResponse

func (p *CreatePosterCandidatesResult) GetSuccess() *CreatePosterCandidatesResponse {
	if !p.IsSetSuccess() {
		return CreatePosterCandidatesResult_Success_DEFAULT
	}
	return p.Success
}
func (p *CreatePosterCandidatesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CreatePosterCandidatesResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CreatePosterCandidatesResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &CreatePosterCandidatesResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *CreatePosterCandidatesResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("CreatePosterCandidates_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *CreatePosterCandidatesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *CreatePosterCandidatesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreatePosterCandidatesResult(%+v)", *p)
}

type MGetPosterCandidatesArgs struct {
	Req *MGetPosterCandidatesRequest `thrift:"req,1" json:"req"`
}

func NewMGetPosterCandidatesArgs() *MGetPosterCandidatesArgs {
	return &MGetPosterCandidatesArgs{}
}

var MGetPosterCandidatesArgs_Req_DEFAULT *MGetPosterCandidatesRequest

func (p *MGetPosterCandidatesArgs) GetReq() *MGetPosterCandidatesRequest {
	if !p.IsSetReq() {
		return MGetPosterCandidatesArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *MGetPosterCandidatesArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MGetPosterCandidatesArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *MGetPosterCandidatesArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &MGetPosterCandidatesRequest{}
	if err := p.Req.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Req, err)
	}
	return nil
}

func (p *MGetPosterCandidatesArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("MGetPosterCandidates_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *MGetPosterCandidatesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:req: %s", p, err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Req, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:req: %s", p, err)
	}
	return err
}

func (p *MGetPosterCandidatesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MGetPosterCandidatesArgs(%+v)", *p)
}

type MGetPosterCandidatesResult struct {
	Success *MGetPosterCandidatesResponse `thrift:"success,0" json:"success"`
}

func NewMGetPosterCandidatesResult() *MGetPosterCandidatesResult {
	return &MGetPosterCandidatesResult{}
}

var MGetPosterCandidatesResult_Success_DEFAULT *MGetPosterCandidatesResponse

func (p *MGetPosterCandidatesResult) GetSuccess() *MGetPosterCandidatesResponse {
	if !p.IsSetSuccess() {
		return MGetPosterCandidatesResult_Success_DEFAULT
	}
	return p.Success
}
func (p *MGetPosterCandidatesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MGetPosterCandidatesResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *MGetPosterCandidatesResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &MGetPosterCandidatesResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *MGetPosterCandidatesResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("MGetPosterCandidates_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *MGetPosterCandidatesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *MGetPosterCandidatesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MGetPosterCandidatesResult(%+v)", *p)
}

type UpdateVideoExtraArgs struct {
	Req *UpdateVideoExtraRequest `thrift:"req,1" json:"req"`
}

func NewUpdateVideoExtraArgs() *UpdateVideoExtraArgs {
	return &UpdateVideoExtraArgs{}
}

var UpdateVideoExtraArgs_Req_DEFAULT *UpdateVideoExtraRequest

func (p *UpdateVideoExtraArgs) GetReq() *UpdateVideoExtraRequest {
	if !p.IsSetReq() {
		return UpdateVideoExtraArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *UpdateVideoExtraArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UpdateVideoExtraArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *UpdateVideoExtraArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &UpdateVideoExtraRequest{}
	if err := p.Req.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Req, err)
	}
	return nil
}

func (p *UpdateVideoExtraArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UpdateVideoExtra_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *UpdateVideoExtraArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:req: %s", p, err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Req, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:req: %s", p, err)
	}
	return err
}

func (p *UpdateVideoExtraArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateVideoExtraArgs(%+v)", *p)
}

type UpdateVideoExtraResult struct {
	Success *UpdateVideoExtraResponse `thrift:"success,0" json:"success"`
}

func NewUpdateVideoExtraResult() *UpdateVideoExtraResult {
	return &UpdateVideoExtraResult{}
}

var UpdateVideoExtraResult_Success_DEFAULT *UpdateVideoExtraResponse

func (p *UpdateVideoExtraResult) GetSuccess() *UpdateVideoExtraResponse {
	if !p.IsSetSuccess() {
		return UpdateVideoExtraResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UpdateVideoExtraResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UpdateVideoExtraResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *UpdateVideoExtraResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &UpdateVideoExtraResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *UpdateVideoExtraResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UpdateVideoExtra_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *UpdateVideoExtraResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *UpdateVideoExtraResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateVideoExtraResult(%+v)", *p)
}

type MUpdateVideoExtraArgs struct {
	Req *MUpdateVideoExtraRequest `thrift:"req,1" json:"req"`
}

func NewMUpdateVideoExtraArgs() *MUpdateVideoExtraArgs {
	return &MUpdateVideoExtraArgs{}
}

var MUpdateVideoExtraArgs_Req_DEFAULT *MUpdateVideoExtraRequest

func (p *MUpdateVideoExtraArgs) GetReq() *MUpdateVideoExtraRequest {
	if !p.IsSetReq() {
		return MUpdateVideoExtraArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *MUpdateVideoExtraArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MUpdateVideoExtraArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *MUpdateVideoExtraArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &MUpdateVideoExtraRequest{}
	if err := p.Req.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Req, err)
	}
	return nil
}

func (p *MUpdateVideoExtraArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("MUpdateVideoExtra_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *MUpdateVideoExtraArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:req: %s", p, err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Req, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:req: %s", p, err)
	}
	return err
}

func (p *MUpdateVideoExtraArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MUpdateVideoExtraArgs(%+v)", *p)
}

type MUpdateVideoExtraResult struct {
	Success *MUpdateVideoExtraResponse `thrift:"success,0" json:"success"`
}

func NewMUpdateVideoExtraResult() *MUpdateVideoExtraResult {
	return &MUpdateVideoExtraResult{}
}

var MUpdateVideoExtraResult_Success_DEFAULT *MUpdateVideoExtraResponse

func (p *MUpdateVideoExtraResult) GetSuccess() *MUpdateVideoExtraResponse {
	if !p.IsSetSuccess() {
		return MUpdateVideoExtraResult_Success_DEFAULT
	}
	return p.Success
}
func (p *MUpdateVideoExtraResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MUpdateVideoExtraResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *MUpdateVideoExtraResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &MUpdateVideoExtraResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *MUpdateVideoExtraResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("MUpdateVideoExtra_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *MUpdateVideoExtraResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *MUpdateVideoExtraResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MUpdateVideoExtraResult(%+v)", *p)
}

type MGetVideoPlayStatusArgs struct {
	Req *MGetVideoPlayStatusRequest `thrift:"req,1" json:"req"`
}

func NewMGetVideoPlayStatusArgs() *MGetVideoPlayStatusArgs {
	return &MGetVideoPlayStatusArgs{}
}

var MGetVideoPlayStatusArgs_Req_DEFAULT *MGetVideoPlayStatusRequest

func (p *MGetVideoPlayStatusArgs) GetReq() *MGetVideoPlayStatusRequest {
	if !p.IsSetReq() {
		return MGetVideoPlayStatusArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *MGetVideoPlayStatusArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MGetVideoPlayStatusArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *MGetVideoPlayStatusArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &MGetVideoPlayStatusRequest{}
	if err := p.Req.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Req, err)
	}
	return nil
}

func (p *MGetVideoPlayStatusArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("MGetVideoPlayStatus_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *MGetVideoPlayStatusArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:req: %s", p, err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Req, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:req: %s", p, err)
	}
	return err
}

func (p *MGetVideoPlayStatusArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MGetVideoPlayStatusArgs(%+v)", *p)
}

type MGetVideoPlayStatusResult struct {
	Success *MGetVideoPlayStatusResponse `thrift:"success,0" json:"success"`
}

func NewMGetVideoPlayStatusResult() *MGetVideoPlayStatusResult {
	return &MGetVideoPlayStatusResult{}
}

var MGetVideoPlayStatusResult_Success_DEFAULT *MGetVideoPlayStatusResponse

func (p *MGetVideoPlayStatusResult) GetSuccess() *MGetVideoPlayStatusResponse {
	if !p.IsSetSuccess() {
		return MGetVideoPlayStatusResult_Success_DEFAULT
	}
	return p.Success
}
func (p *MGetVideoPlayStatusResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MGetVideoPlayStatusResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *MGetVideoPlayStatusResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &MGetVideoPlayStatusResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *MGetVideoPlayStatusResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("MGetVideoPlayStatus_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *MGetVideoPlayStatusResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *MGetVideoPlayStatusResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MGetVideoPlayStatusResult(%+v)", *p)
}

type UpdateVideoPlayStatusArgs struct {
	Req *UpdateVideoPlayStatusRequest `thrift:"req,1" json:"req"`
}

func NewUpdateVideoPlayStatusArgs() *UpdateVideoPlayStatusArgs {
	return &UpdateVideoPlayStatusArgs{}
}

var UpdateVideoPlayStatusArgs_Req_DEFAULT *UpdateVideoPlayStatusRequest

func (p *UpdateVideoPlayStatusArgs) GetReq() *UpdateVideoPlayStatusRequest {
	if !p.IsSetReq() {
		return UpdateVideoPlayStatusArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *UpdateVideoPlayStatusArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UpdateVideoPlayStatusArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *UpdateVideoPlayStatusArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &UpdateVideoPlayStatusRequest{}
	if err := p.Req.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Req, err)
	}
	return nil
}

func (p *UpdateVideoPlayStatusArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UpdateVideoPlayStatus_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *UpdateVideoPlayStatusArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:req: %s", p, err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Req, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:req: %s", p, err)
	}
	return err
}

func (p *UpdateVideoPlayStatusArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateVideoPlayStatusArgs(%+v)", *p)
}

type UpdateVideoPlayStatusResult struct {
	Success *UpdateVideoPlayStatusResponse `thrift:"success,0" json:"success"`
}

func NewUpdateVideoPlayStatusResult() *UpdateVideoPlayStatusResult {
	return &UpdateVideoPlayStatusResult{}
}

var UpdateVideoPlayStatusResult_Success_DEFAULT *UpdateVideoPlayStatusResponse

func (p *UpdateVideoPlayStatusResult) GetSuccess() *UpdateVideoPlayStatusResponse {
	if !p.IsSetSuccess() {
		return UpdateVideoPlayStatusResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UpdateVideoPlayStatusResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UpdateVideoPlayStatusResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *UpdateVideoPlayStatusResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &UpdateVideoPlayStatusResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *UpdateVideoPlayStatusResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UpdateVideoPlayStatus_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *UpdateVideoPlayStatusResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *UpdateVideoPlayStatusResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateVideoPlayStatusResult(%+v)", *p)
}

type UpdateEncodedTypeArgs struct {
	Req *UpdateEncodedTypeRequest `thrift:"req,1" json:"req"`
}

func NewUpdateEncodedTypeArgs() *UpdateEncodedTypeArgs {
	return &UpdateEncodedTypeArgs{}
}

var UpdateEncodedTypeArgs_Req_DEFAULT *UpdateEncodedTypeRequest

func (p *UpdateEncodedTypeArgs) GetReq() *UpdateEncodedTypeRequest {
	if !p.IsSetReq() {
		return UpdateEncodedTypeArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *UpdateEncodedTypeArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UpdateEncodedTypeArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *UpdateEncodedTypeArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &UpdateEncodedTypeRequest{}
	if err := p.Req.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Req, err)
	}
	return nil
}

func (p *UpdateEncodedTypeArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UpdateEncodedType_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *UpdateEncodedTypeArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:req: %s", p, err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Req, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:req: %s", p, err)
	}
	return err
}

func (p *UpdateEncodedTypeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateEncodedTypeArgs(%+v)", *p)
}

type UpdateEncodedTypeResult struct {
	Success *UpdateEncodedTypeResponse `thrift:"success,0" json:"success"`
}

func NewUpdateEncodedTypeResult() *UpdateEncodedTypeResult {
	return &UpdateEncodedTypeResult{}
}

var UpdateEncodedTypeResult_Success_DEFAULT *UpdateEncodedTypeResponse

func (p *UpdateEncodedTypeResult) GetSuccess() *UpdateEncodedTypeResponse {
	if !p.IsSetSuccess() {
		return UpdateEncodedTypeResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UpdateEncodedTypeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UpdateEncodedTypeResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *UpdateEncodedTypeResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &UpdateEncodedTypeResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *UpdateEncodedTypeResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UpdateEncodedType_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *UpdateEncodedTypeResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *UpdateEncodedTypeResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateEncodedTypeResult(%+v)", *p)
}

type CreateDynamicLogoInfoArgs struct {
	Req *CreateDynamicLogoInfoRequest `thrift:"req,1" json:"req"`
}

func NewCreateDynamicLogoInfoArgs() *CreateDynamicLogoInfoArgs {
	return &CreateDynamicLogoInfoArgs{}
}

var CreateDynamicLogoInfoArgs_Req_DEFAULT *CreateDynamicLogoInfoRequest

func (p *CreateDynamicLogoInfoArgs) GetReq() *CreateDynamicLogoInfoRequest {
	if !p.IsSetReq() {
		return CreateDynamicLogoInfoArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *CreateDynamicLogoInfoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CreateDynamicLogoInfoArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CreateDynamicLogoInfoArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &CreateDynamicLogoInfoRequest{}
	if err := p.Req.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Req, err)
	}
	return nil
}

func (p *CreateDynamicLogoInfoArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("CreateDynamicLogoInfo_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *CreateDynamicLogoInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:req: %s", p, err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Req, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:req: %s", p, err)
	}
	return err
}

func (p *CreateDynamicLogoInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateDynamicLogoInfoArgs(%+v)", *p)
}

type CreateDynamicLogoInfoResult struct {
	Success *CreateDynamicLogoInfoResponse `thrift:"success,0" json:"success"`
}

func NewCreateDynamicLogoInfoResult() *CreateDynamicLogoInfoResult {
	return &CreateDynamicLogoInfoResult{}
}

var CreateDynamicLogoInfoResult_Success_DEFAULT *CreateDynamicLogoInfoResponse

func (p *CreateDynamicLogoInfoResult) GetSuccess() *CreateDynamicLogoInfoResponse {
	if !p.IsSetSuccess() {
		return CreateDynamicLogoInfoResult_Success_DEFAULT
	}
	return p.Success
}
func (p *CreateDynamicLogoInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CreateDynamicLogoInfoResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CreateDynamicLogoInfoResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &CreateDynamicLogoInfoResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *CreateDynamicLogoInfoResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("CreateDynamicLogoInfo_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *CreateDynamicLogoInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *CreateDynamicLogoInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateDynamicLogoInfoResult(%+v)", *p)
}

type GetDynamicLogoInfoArgs struct {
	Req *GetDynamicLogoInfoRequest `thrift:"req,1" json:"req"`
}

func NewGetDynamicLogoInfoArgs() *GetDynamicLogoInfoArgs {
	return &GetDynamicLogoInfoArgs{}
}

var GetDynamicLogoInfoArgs_Req_DEFAULT *GetDynamicLogoInfoRequest

func (p *GetDynamicLogoInfoArgs) GetReq() *GetDynamicLogoInfoRequest {
	if !p.IsSetReq() {
		return GetDynamicLogoInfoArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *GetDynamicLogoInfoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetDynamicLogoInfoArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetDynamicLogoInfoArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &GetDynamicLogoInfoRequest{}
	if err := p.Req.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Req, err)
	}
	return nil
}

func (p *GetDynamicLogoInfoArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetDynamicLogoInfo_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetDynamicLogoInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:req: %s", p, err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Req, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:req: %s", p, err)
	}
	return err
}

func (p *GetDynamicLogoInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetDynamicLogoInfoArgs(%+v)", *p)
}

type GetDynamicLogoInfoResult struct {
	Success *GetDynamicLogoInfoResponse `thrift:"success,0" json:"success"`
}

func NewGetDynamicLogoInfoResult() *GetDynamicLogoInfoResult {
	return &GetDynamicLogoInfoResult{}
}

var GetDynamicLogoInfoResult_Success_DEFAULT *GetDynamicLogoInfoResponse

func (p *GetDynamicLogoInfoResult) GetSuccess() *GetDynamicLogoInfoResponse {
	if !p.IsSetSuccess() {
		return GetDynamicLogoInfoResult_Success_DEFAULT
	}
	return p.Success
}
func (p *GetDynamicLogoInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetDynamicLogoInfoResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetDynamicLogoInfoResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &GetDynamicLogoInfoResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *GetDynamicLogoInfoResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetDynamicLogoInfo_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetDynamicLogoInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetDynamicLogoInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetDynamicLogoInfoResult(%+v)", *p)
}

type GetVideoStoreInfosByMD5Args struct {
	Req *GetVideoStoreInfosByMD5Request `thrift:"req,1" json:"req"`
}

func NewGetVideoStoreInfosByMD5Args() *GetVideoStoreInfosByMD5Args {
	return &GetVideoStoreInfosByMD5Args{}
}

var GetVideoStoreInfosByMD5Args_Req_DEFAULT *GetVideoStoreInfosByMD5Request

func (p *GetVideoStoreInfosByMD5Args) GetReq() *GetVideoStoreInfosByMD5Request {
	if !p.IsSetReq() {
		return GetVideoStoreInfosByMD5Args_Req_DEFAULT
	}
	return p.Req
}
func (p *GetVideoStoreInfosByMD5Args) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetVideoStoreInfosByMD5Args) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetVideoStoreInfosByMD5Args) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &GetVideoStoreInfosByMD5Request{}
	if err := p.Req.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Req, err)
	}
	return nil
}

func (p *GetVideoStoreInfosByMD5Args) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetVideoStoreInfosByMD5_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetVideoStoreInfosByMD5Args) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:req: %s", p, err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Req, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:req: %s", p, err)
	}
	return err
}

func (p *GetVideoStoreInfosByMD5Args) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetVideoStoreInfosByMD5Args(%+v)", *p)
}

type GetVideoStoreInfosByMD5Result struct {
	Success *GetVideoStoreInfosByMD5Response `thrift:"success,0" json:"success"`
}

func NewGetVideoStoreInfosByMD5Result() *GetVideoStoreInfosByMD5Result {
	return &GetVideoStoreInfosByMD5Result{}
}

var GetVideoStoreInfosByMD5Result_Success_DEFAULT *GetVideoStoreInfosByMD5Response

func (p *GetVideoStoreInfosByMD5Result) GetSuccess() *GetVideoStoreInfosByMD5Response {
	if !p.IsSetSuccess() {
		return GetVideoStoreInfosByMD5Result_Success_DEFAULT
	}
	return p.Success
}
func (p *GetVideoStoreInfosByMD5Result) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetVideoStoreInfosByMD5Result) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetVideoStoreInfosByMD5Result) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &GetVideoStoreInfosByMD5Response{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *GetVideoStoreInfosByMD5Result) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetVideoStoreInfosByMD5_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetVideoStoreInfosByMD5Result) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetVideoStoreInfosByMD5Result) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetVideoStoreInfosByMD5Result(%+v)", *p)
}
