// Autogenerated by Thrift Compiler (0.9.2)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package videoarch_common

import (
	"bytes"
	"code.byted.org/gopkg/thrift"
	"fmt"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var GoUnusedProtection__ int

type UserAction int64

const (
	UserAction_NoAction         UserAction = 0
	UserAction_Shield           UserAction = 1
	UserAction_MarkDeleted      UserAction = 2
	UserAction_PermanentDeleted UserAction = 3
	UserAction_Available        UserAction = 4
)

func (p UserAction) String() string {
	switch p {
	case UserAction_NoAction:
		return "UserAction_NoAction"
	case UserAction_Shield:
		return "UserAction_Shield"
	case UserAction_MarkDeleted:
		return "UserAction_MarkDeleted"
	case UserAction_PermanentDeleted:
		return "UserAction_PermanentDeleted"
	case UserAction_Available:
		return "UserAction_Available"
	}
	return "<UNSET>"
}

func UserActionFromString(s string) (UserAction, error) {
	switch s {
	case "UserAction_NoAction":
		return UserAction_NoAction, nil
	case "UserAction_Shield":
		return UserAction_Shield, nil
	case "UserAction_MarkDeleted":
		return UserAction_MarkDeleted, nil
	case "UserAction_PermanentDeleted":
		return UserAction_PermanentDeleted, nil
	case "UserAction_Available":
		return UserAction_Available, nil
	}
	return UserAction(0), fmt.Errorf("not a valid UserAction string")
}

func UserActionPtr(v UserAction) *UserAction { return &v }

type VideoStatus int64

const (
	VideoStatus_Unknown             VideoStatus = 0
	VideoStatus_Uploading           VideoStatus = 1
	VideoStatus_UploadFailed        VideoStatus = 2
	VideoStatus_WaitingForUploading VideoStatus = 3
	VideoStatus_UploadSuccess       VideoStatus = 4
	VideoStatus_EncodeSuccess       VideoStatus = 10
	VideoStatus_EncodeFailed        VideoStatus = 20
	VideoStatus_EncodeProcessing    VideoStatus = 30
	VideoStatus_NonExistentId       VideoStatus = 40
)

func (p VideoStatus) String() string {
	switch p {
	case VideoStatus_Unknown:
		return "VideoStatus_Unknown"
	case VideoStatus_Uploading:
		return "VideoStatus_Uploading"
	case VideoStatus_UploadFailed:
		return "VideoStatus_UploadFailed"
	case VideoStatus_WaitingForUploading:
		return "VideoStatus_WaitingForUploading"
	case VideoStatus_UploadSuccess:
		return "VideoStatus_UploadSuccess"
	case VideoStatus_EncodeSuccess:
		return "VideoStatus_EncodeSuccess"
	case VideoStatus_EncodeFailed:
		return "VideoStatus_EncodeFailed"
	case VideoStatus_EncodeProcessing:
		return "VideoStatus_EncodeProcessing"
	case VideoStatus_NonExistentId:
		return "VideoStatus_NonExistentId"
	}
	return "<UNSET>"
}

func VideoStatusFromString(s string) (VideoStatus, error) {
	switch s {
	case "VideoStatus_Unknown":
		return VideoStatus_Unknown, nil
	case "VideoStatus_Uploading":
		return VideoStatus_Uploading, nil
	case "VideoStatus_UploadFailed":
		return VideoStatus_UploadFailed, nil
	case "VideoStatus_WaitingForUploading":
		return VideoStatus_WaitingForUploading, nil
	case "VideoStatus_UploadSuccess":
		return VideoStatus_UploadSuccess, nil
	case "VideoStatus_EncodeSuccess":
		return VideoStatus_EncodeSuccess, nil
	case "VideoStatus_EncodeFailed":
		return VideoStatus_EncodeFailed, nil
	case "VideoStatus_EncodeProcessing":
		return VideoStatus_EncodeProcessing, nil
	case "VideoStatus_NonExistentId":
		return VideoStatus_NonExistentId, nil
	}
	return VideoStatus(0), fmt.Errorf("not a valid VideoStatus string")
}

func VideoStatusPtr(v VideoStatus) *VideoStatus { return &v }

type Meta struct {
	Height     *int64   `thrift:"Height,1" json:"Height"`
	Width      *int64   `thrift:"Width,2" json:"Width"`
	Format     *string  `thrift:"Format,3" json:"Format"`
	Duration   *float64 `thrift:"Duration,4" json:"Duration"`
	Size       *int64   `thrift:"Size,5" json:"Size"`
	StoreURI   *string  `thrift:"StoreURI,6" json:"StoreURI"`
	Definition *string  `thrift:"Definition,7" json:"Definition"`
	Bitrate    *int64   `thrift:"Bitrate,8" json:"Bitrate"`
}

func NewMeta() *Meta {
	return &Meta{}
}

var Meta_Height_DEFAULT int64

func (p *Meta) GetHeight() int64 {
	if !p.IsSetHeight() {
		return Meta_Height_DEFAULT
	}
	return *p.Height
}

var Meta_Width_DEFAULT int64

func (p *Meta) GetWidth() int64 {
	if !p.IsSetWidth() {
		return Meta_Width_DEFAULT
	}
	return *p.Width
}

var Meta_Format_DEFAULT string

func (p *Meta) GetFormat() string {
	if !p.IsSetFormat() {
		return Meta_Format_DEFAULT
	}
	return *p.Format
}

var Meta_Duration_DEFAULT float64

func (p *Meta) GetDuration() float64 {
	if !p.IsSetDuration() {
		return Meta_Duration_DEFAULT
	}
	return *p.Duration
}

var Meta_Size_DEFAULT int64

func (p *Meta) GetSize() int64 {
	if !p.IsSetSize() {
		return Meta_Size_DEFAULT
	}
	return *p.Size
}

var Meta_StoreURI_DEFAULT string

func (p *Meta) GetStoreURI() string {
	if !p.IsSetStoreURI() {
		return Meta_StoreURI_DEFAULT
	}
	return *p.StoreURI
}

var Meta_Definition_DEFAULT string

func (p *Meta) GetDefinition() string {
	if !p.IsSetDefinition() {
		return Meta_Definition_DEFAULT
	}
	return *p.Definition
}

var Meta_Bitrate_DEFAULT int64

func (p *Meta) GetBitrate() int64 {
	if !p.IsSetBitrate() {
		return Meta_Bitrate_DEFAULT
	}
	return *p.Bitrate
}
func (p *Meta) IsSetHeight() bool {
	return p.Height != nil
}

func (p *Meta) IsSetWidth() bool {
	return p.Width != nil
}

func (p *Meta) IsSetFormat() bool {
	return p.Format != nil
}

func (p *Meta) IsSetDuration() bool {
	return p.Duration != nil
}

func (p *Meta) IsSetSize() bool {
	return p.Size != nil
}

func (p *Meta) IsSetStoreURI() bool {
	return p.StoreURI != nil
}

func (p *Meta) IsSetDefinition() bool {
	return p.Definition != nil
}

func (p *Meta) IsSetBitrate() bool {
	return p.Bitrate != nil
}

func (p *Meta) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Meta) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Height = &v
	}
	return nil
}

func (p *Meta) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Width = &v
	}
	return nil
}

func (p *Meta) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Format = &v
	}
	return nil
}

func (p *Meta) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.Duration = &v
	}
	return nil
}

func (p *Meta) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.Size = &v
	}
	return nil
}

func (p *Meta) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.StoreURI = &v
	}
	return nil
}

func (p *Meta) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 7: %s", err)
	} else {
		p.Definition = &v
	}
	return nil
}

func (p *Meta) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 8: %s", err)
	} else {
		p.Bitrate = &v
	}
	return nil
}

func (p *Meta) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Meta"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *Meta) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetHeight() {
		if err := oprot.WriteFieldBegin("Height", thrift.I64, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:Height: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.Height)); err != nil {
			return fmt.Errorf("%T.Height (1) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:Height: %s", p, err)
		}
	}
	return err
}

func (p *Meta) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetWidth() {
		if err := oprot.WriteFieldBegin("Width", thrift.I64, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:Width: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.Width)); err != nil {
			return fmt.Errorf("%T.Width (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:Width: %s", p, err)
		}
	}
	return err
}

func (p *Meta) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetFormat() {
		if err := oprot.WriteFieldBegin("Format", thrift.STRING, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:Format: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Format)); err != nil {
			return fmt.Errorf("%T.Format (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:Format: %s", p, err)
		}
	}
	return err
}

func (p *Meta) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetDuration() {
		if err := oprot.WriteFieldBegin("Duration", thrift.DOUBLE, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:Duration: %s", p, err)
		}
		if err := oprot.WriteDouble(float64(*p.Duration)); err != nil {
			return fmt.Errorf("%T.Duration (4) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:Duration: %s", p, err)
		}
	}
	return err
}

func (p *Meta) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetSize() {
		if err := oprot.WriteFieldBegin("Size", thrift.I64, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:Size: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.Size)); err != nil {
			return fmt.Errorf("%T.Size (5) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:Size: %s", p, err)
		}
	}
	return err
}

func (p *Meta) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetStoreURI() {
		if err := oprot.WriteFieldBegin("StoreURI", thrift.STRING, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:StoreURI: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.StoreURI)); err != nil {
			return fmt.Errorf("%T.StoreURI (6) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:StoreURI: %s", p, err)
		}
	}
	return err
}

func (p *Meta) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetDefinition() {
		if err := oprot.WriteFieldBegin("Definition", thrift.STRING, 7); err != nil {
			return fmt.Errorf("%T write field begin error 7:Definition: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Definition)); err != nil {
			return fmt.Errorf("%T.Definition (7) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 7:Definition: %s", p, err)
		}
	}
	return err
}

func (p *Meta) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetBitrate() {
		if err := oprot.WriteFieldBegin("Bitrate", thrift.I64, 8); err != nil {
			return fmt.Errorf("%T write field begin error 8:Bitrate: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.Bitrate)); err != nil {
			return fmt.Errorf("%T.Bitrate (8) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 8:Bitrate: %s", p, err)
		}
	}
	return err
}

func (p *Meta) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Meta(%+v)", *p)
}

type VideoCommonInfo struct {
	ID         int64             `thrift:"ID,1" json:"ID"`
	FileID     string            `thrift:"FileID,2" json:"FileID"`
	FileName   string            `thrift:"FileName,3" json:"FileName"`
	MetaInfo   *Meta             `thrift:"MetaInfo,4" json:"MetaInfo"`
	FileStatus *string           `thrift:"FileStatus,5" json:"FileStatus"`
	FileHash   *string           `thrift:"FileHash,6" json:"FileHash"`
	Extra      map[string]string `thrift:"Extra,7" json:"Extra"`
	CreateTime int64             `thrift:"CreateTime,8" json:"CreateTime"`
	UpdateTime int64             `thrift:"UpdateTime,9" json:"UpdateTime"`
}

func NewVideoCommonInfo() *VideoCommonInfo {
	return &VideoCommonInfo{}
}

func (p *VideoCommonInfo) GetID() int64 {
	return p.ID
}

func (p *VideoCommonInfo) GetFileID() string {
	return p.FileID
}

func (p *VideoCommonInfo) GetFileName() string {
	return p.FileName
}

var VideoCommonInfo_MetaInfo_DEFAULT *Meta

func (p *VideoCommonInfo) GetMetaInfo() *Meta {
	if !p.IsSetMetaInfo() {
		return VideoCommonInfo_MetaInfo_DEFAULT
	}
	return p.MetaInfo
}

var VideoCommonInfo_FileStatus_DEFAULT string

func (p *VideoCommonInfo) GetFileStatus() string {
	if !p.IsSetFileStatus() {
		return VideoCommonInfo_FileStatus_DEFAULT
	}
	return *p.FileStatus
}

var VideoCommonInfo_FileHash_DEFAULT string

func (p *VideoCommonInfo) GetFileHash() string {
	if !p.IsSetFileHash() {
		return VideoCommonInfo_FileHash_DEFAULT
	}
	return *p.FileHash
}

var VideoCommonInfo_Extra_DEFAULT map[string]string

func (p *VideoCommonInfo) GetExtra() map[string]string {
	return p.Extra
}

func (p *VideoCommonInfo) GetCreateTime() int64 {
	return p.CreateTime
}

func (p *VideoCommonInfo) GetUpdateTime() int64 {
	return p.UpdateTime
}
func (p *VideoCommonInfo) IsSetMetaInfo() bool {
	return p.MetaInfo != nil
}

func (p *VideoCommonInfo) IsSetFileStatus() bool {
	return p.FileStatus != nil
}

func (p *VideoCommonInfo) IsSetFileHash() bool {
	return p.FileHash != nil
}

func (p *VideoCommonInfo) IsSetExtra() bool {
	return p.Extra != nil
}

func (p *VideoCommonInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.ReadField9(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *VideoCommonInfo) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *VideoCommonInfo) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.FileID = v
	}
	return nil
}

func (p *VideoCommonInfo) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.FileName = v
	}
	return nil
}

func (p *VideoCommonInfo) ReadField4(iprot thrift.TProtocol) error {
	p.MetaInfo = &Meta{}
	if err := p.MetaInfo.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.MetaInfo, err)
	}
	return nil
}

func (p *VideoCommonInfo) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.FileStatus = &v
	}
	return nil
}

func (p *VideoCommonInfo) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.FileHash = &v
	}
	return nil
}

func (p *VideoCommonInfo) ReadField7(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string]string, size)
	p.Extra = tMap
	for i := 0; i < size; i++ {
		var _key0 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key0 = v
		}
		var _val1 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_val1 = v
		}
		p.Extra[_key0] = _val1
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *VideoCommonInfo) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 8: %s", err)
	} else {
		p.CreateTime = v
	}
	return nil
}

func (p *VideoCommonInfo) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 9: %s", err)
	} else {
		p.UpdateTime = v
	}
	return nil
}

func (p *VideoCommonInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("VideoCommonInfo"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *VideoCommonInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ID", thrift.I64, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:ID: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.ID)); err != nil {
		return fmt.Errorf("%T.ID (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:ID: %s", p, err)
	}
	return err
}

func (p *VideoCommonInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("FileID", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:FileID: %s", p, err)
	}
	if err := oprot.WriteString(string(p.FileID)); err != nil {
		return fmt.Errorf("%T.FileID (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:FileID: %s", p, err)
	}
	return err
}

func (p *VideoCommonInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("FileName", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:FileName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.FileName)); err != nil {
		return fmt.Errorf("%T.FileName (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:FileName: %s", p, err)
	}
	return err
}

func (p *VideoCommonInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetMetaInfo() {
		if err := oprot.WriteFieldBegin("MetaInfo", thrift.STRUCT, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:MetaInfo: %s", p, err)
		}
		if err := p.MetaInfo.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.MetaInfo, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:MetaInfo: %s", p, err)
		}
	}
	return err
}

func (p *VideoCommonInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetFileStatus() {
		if err := oprot.WriteFieldBegin("FileStatus", thrift.STRING, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:FileStatus: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.FileStatus)); err != nil {
			return fmt.Errorf("%T.FileStatus (5) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:FileStatus: %s", p, err)
		}
	}
	return err
}

func (p *VideoCommonInfo) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetFileHash() {
		if err := oprot.WriteFieldBegin("FileHash", thrift.STRING, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:FileHash: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.FileHash)); err != nil {
			return fmt.Errorf("%T.FileHash (6) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:FileHash: %s", p, err)
		}
	}
	return err
}

func (p *VideoCommonInfo) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetExtra() {
		if err := oprot.WriteFieldBegin("Extra", thrift.MAP, 7); err != nil {
			return fmt.Errorf("%T write field begin error 7:Extra: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
			return fmt.Errorf("error writing map begin: %s", err)
		}
		for k, v := range p.Extra {
			if err := oprot.WriteString(string(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 7:Extra: %s", p, err)
		}
	}
	return err
}

func (p *VideoCommonInfo) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("CreateTime", thrift.I64, 8); err != nil {
		return fmt.Errorf("%T write field begin error 8:CreateTime: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.CreateTime)); err != nil {
		return fmt.Errorf("%T.CreateTime (8) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 8:CreateTime: %s", p, err)
	}
	return err
}

func (p *VideoCommonInfo) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("UpdateTime", thrift.I64, 9); err != nil {
		return fmt.Errorf("%T write field begin error 9:UpdateTime: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.UpdateTime)); err != nil {
		return fmt.Errorf("%T.UpdateTime (9) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 9:UpdateTime: %s", p, err)
	}
	return err
}

func (p *VideoCommonInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoCommonInfo(%+v)", *p)
}

type EncodedVideoInfo struct {
	ID              int64             `thrift:"ID,1" json:"ID"`
	OriginalID      string            `thrift:"OriginalID,2" json:"OriginalID"`
	OriginalInt64ID *int64            `thrift:"OriginalInt64ID,3" json:"OriginalInt64ID"`
	EncodedID       string            `thrift:"EncodedID,4" json:"EncodedID"`
	FileName        string            `thrift:"FileName,5" json:"FileName"`
	MetaInfo        *Meta             `thrift:"MetaInfo,6" json:"MetaInfo"`
	FileHash        *string           `thrift:"FileHash,7" json:"FileHash"`
	EncodedType     *string           `thrift:"EncodedType,8" json:"EncodedType"`
	EncodedTime     *float64          `thrift:"EncodedTime,9" json:"EncodedTime"`
	EncodedHost     *string           `thrift:"EncodedHost,10" json:"EncodedHost"`
	FileStatus      *string           `thrift:"FileStatus,11" json:"FileStatus"`
	Extra           map[string]string `thrift:"Extra,12" json:"Extra"`
	CreateTime      int64             `thrift:"CreateTime,13" json:"CreateTime"`
	UpdateTime      int64             `thrift:"UpdateTime,14" json:"UpdateTime"`
}

func NewEncodedVideoInfo() *EncodedVideoInfo {
	return &EncodedVideoInfo{}
}

func (p *EncodedVideoInfo) GetID() int64 {
	return p.ID
}

func (p *EncodedVideoInfo) GetOriginalID() string {
	return p.OriginalID
}

var EncodedVideoInfo_OriginalInt64ID_DEFAULT int64

func (p *EncodedVideoInfo) GetOriginalInt64ID() int64 {
	if !p.IsSetOriginalInt64ID() {
		return EncodedVideoInfo_OriginalInt64ID_DEFAULT
	}
	return *p.OriginalInt64ID
}

func (p *EncodedVideoInfo) GetEncodedID() string {
	return p.EncodedID
}

func (p *EncodedVideoInfo) GetFileName() string {
	return p.FileName
}

var EncodedVideoInfo_MetaInfo_DEFAULT *Meta

func (p *EncodedVideoInfo) GetMetaInfo() *Meta {
	if !p.IsSetMetaInfo() {
		return EncodedVideoInfo_MetaInfo_DEFAULT
	}
	return p.MetaInfo
}

var EncodedVideoInfo_FileHash_DEFAULT string

func (p *EncodedVideoInfo) GetFileHash() string {
	if !p.IsSetFileHash() {
		return EncodedVideoInfo_FileHash_DEFAULT
	}
	return *p.FileHash
}

var EncodedVideoInfo_EncodedType_DEFAULT string

func (p *EncodedVideoInfo) GetEncodedType() string {
	if !p.IsSetEncodedType() {
		return EncodedVideoInfo_EncodedType_DEFAULT
	}
	return *p.EncodedType
}

var EncodedVideoInfo_EncodedTime_DEFAULT float64

func (p *EncodedVideoInfo) GetEncodedTime() float64 {
	if !p.IsSetEncodedTime() {
		return EncodedVideoInfo_EncodedTime_DEFAULT
	}
	return *p.EncodedTime
}

var EncodedVideoInfo_EncodedHost_DEFAULT string

func (p *EncodedVideoInfo) GetEncodedHost() string {
	if !p.IsSetEncodedHost() {
		return EncodedVideoInfo_EncodedHost_DEFAULT
	}
	return *p.EncodedHost
}

var EncodedVideoInfo_FileStatus_DEFAULT string

func (p *EncodedVideoInfo) GetFileStatus() string {
	if !p.IsSetFileStatus() {
		return EncodedVideoInfo_FileStatus_DEFAULT
	}
	return *p.FileStatus
}

var EncodedVideoInfo_Extra_DEFAULT map[string]string

func (p *EncodedVideoInfo) GetExtra() map[string]string {
	return p.Extra
}

func (p *EncodedVideoInfo) GetCreateTime() int64 {
	return p.CreateTime
}

func (p *EncodedVideoInfo) GetUpdateTime() int64 {
	return p.UpdateTime
}
func (p *EncodedVideoInfo) IsSetOriginalInt64ID() bool {
	return p.OriginalInt64ID != nil
}

func (p *EncodedVideoInfo) IsSetMetaInfo() bool {
	return p.MetaInfo != nil
}

func (p *EncodedVideoInfo) IsSetFileHash() bool {
	return p.FileHash != nil
}

func (p *EncodedVideoInfo) IsSetEncodedType() bool {
	return p.EncodedType != nil
}

func (p *EncodedVideoInfo) IsSetEncodedTime() bool {
	return p.EncodedTime != nil
}

func (p *EncodedVideoInfo) IsSetEncodedHost() bool {
	return p.EncodedHost != nil
}

func (p *EncodedVideoInfo) IsSetFileStatus() bool {
	return p.FileStatus != nil
}

func (p *EncodedVideoInfo) IsSetExtra() bool {
	return p.Extra != nil
}

func (p *EncodedVideoInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.ReadField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.ReadField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.ReadField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.ReadField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.ReadField13(iprot); err != nil {
				return err
			}
		case 14:
			if err := p.ReadField14(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *EncodedVideoInfo) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *EncodedVideoInfo) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.OriginalID = v
	}
	return nil
}

func (p *EncodedVideoInfo) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.OriginalInt64ID = &v
	}
	return nil
}

func (p *EncodedVideoInfo) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.EncodedID = v
	}
	return nil
}

func (p *EncodedVideoInfo) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.FileName = v
	}
	return nil
}

func (p *EncodedVideoInfo) ReadField6(iprot thrift.TProtocol) error {
	p.MetaInfo = &Meta{}
	if err := p.MetaInfo.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.MetaInfo, err)
	}
	return nil
}

func (p *EncodedVideoInfo) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 7: %s", err)
	} else {
		p.FileHash = &v
	}
	return nil
}

func (p *EncodedVideoInfo) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 8: %s", err)
	} else {
		p.EncodedType = &v
	}
	return nil
}

func (p *EncodedVideoInfo) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return fmt.Errorf("error reading field 9: %s", err)
	} else {
		p.EncodedTime = &v
	}
	return nil
}

func (p *EncodedVideoInfo) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 10: %s", err)
	} else {
		p.EncodedHost = &v
	}
	return nil
}

func (p *EncodedVideoInfo) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 11: %s", err)
	} else {
		p.FileStatus = &v
	}
	return nil
}

func (p *EncodedVideoInfo) ReadField12(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string]string, size)
	p.Extra = tMap
	for i := 0; i < size; i++ {
		var _key2 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key2 = v
		}
		var _val3 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_val3 = v
		}
		p.Extra[_key2] = _val3
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *EncodedVideoInfo) ReadField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 13: %s", err)
	} else {
		p.CreateTime = v
	}
	return nil
}

func (p *EncodedVideoInfo) ReadField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 14: %s", err)
	} else {
		p.UpdateTime = v
	}
	return nil
}

func (p *EncodedVideoInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("EncodedVideoInfo"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField13(oprot); err != nil {
		return err
	}
	if err := p.writeField14(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *EncodedVideoInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ID", thrift.I64, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:ID: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.ID)); err != nil {
		return fmt.Errorf("%T.ID (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:ID: %s", p, err)
	}
	return err
}

func (p *EncodedVideoInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("OriginalID", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:OriginalID: %s", p, err)
	}
	if err := oprot.WriteString(string(p.OriginalID)); err != nil {
		return fmt.Errorf("%T.OriginalID (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:OriginalID: %s", p, err)
	}
	return err
}

func (p *EncodedVideoInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetOriginalInt64ID() {
		if err := oprot.WriteFieldBegin("OriginalInt64ID", thrift.I64, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:OriginalInt64ID: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.OriginalInt64ID)); err != nil {
			return fmt.Errorf("%T.OriginalInt64ID (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:OriginalInt64ID: %s", p, err)
		}
	}
	return err
}

func (p *EncodedVideoInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("EncodedID", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:EncodedID: %s", p, err)
	}
	if err := oprot.WriteString(string(p.EncodedID)); err != nil {
		return fmt.Errorf("%T.EncodedID (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:EncodedID: %s", p, err)
	}
	return err
}

func (p *EncodedVideoInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("FileName", thrift.STRING, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:FileName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.FileName)); err != nil {
		return fmt.Errorf("%T.FileName (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:FileName: %s", p, err)
	}
	return err
}

func (p *EncodedVideoInfo) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetMetaInfo() {
		if err := oprot.WriteFieldBegin("MetaInfo", thrift.STRUCT, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:MetaInfo: %s", p, err)
		}
		if err := p.MetaInfo.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.MetaInfo, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:MetaInfo: %s", p, err)
		}
	}
	return err
}

func (p *EncodedVideoInfo) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetFileHash() {
		if err := oprot.WriteFieldBegin("FileHash", thrift.STRING, 7); err != nil {
			return fmt.Errorf("%T write field begin error 7:FileHash: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.FileHash)); err != nil {
			return fmt.Errorf("%T.FileHash (7) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 7:FileHash: %s", p, err)
		}
	}
	return err
}

func (p *EncodedVideoInfo) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetEncodedType() {
		if err := oprot.WriteFieldBegin("EncodedType", thrift.STRING, 8); err != nil {
			return fmt.Errorf("%T write field begin error 8:EncodedType: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.EncodedType)); err != nil {
			return fmt.Errorf("%T.EncodedType (8) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 8:EncodedType: %s", p, err)
		}
	}
	return err
}

func (p *EncodedVideoInfo) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetEncodedTime() {
		if err := oprot.WriteFieldBegin("EncodedTime", thrift.DOUBLE, 9); err != nil {
			return fmt.Errorf("%T write field begin error 9:EncodedTime: %s", p, err)
		}
		if err := oprot.WriteDouble(float64(*p.EncodedTime)); err != nil {
			return fmt.Errorf("%T.EncodedTime (9) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 9:EncodedTime: %s", p, err)
		}
	}
	return err
}

func (p *EncodedVideoInfo) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetEncodedHost() {
		if err := oprot.WriteFieldBegin("EncodedHost", thrift.STRING, 10); err != nil {
			return fmt.Errorf("%T write field begin error 10:EncodedHost: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.EncodedHost)); err != nil {
			return fmt.Errorf("%T.EncodedHost (10) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 10:EncodedHost: %s", p, err)
		}
	}
	return err
}

func (p *EncodedVideoInfo) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetFileStatus() {
		if err := oprot.WriteFieldBegin("FileStatus", thrift.STRING, 11); err != nil {
			return fmt.Errorf("%T write field begin error 11:FileStatus: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.FileStatus)); err != nil {
			return fmt.Errorf("%T.FileStatus (11) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 11:FileStatus: %s", p, err)
		}
	}
	return err
}

func (p *EncodedVideoInfo) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetExtra() {
		if err := oprot.WriteFieldBegin("Extra", thrift.MAP, 12); err != nil {
			return fmt.Errorf("%T write field begin error 12:Extra: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
			return fmt.Errorf("error writing map begin: %s", err)
		}
		for k, v := range p.Extra {
			if err := oprot.WriteString(string(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 12:Extra: %s", p, err)
		}
	}
	return err
}

func (p *EncodedVideoInfo) writeField13(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("CreateTime", thrift.I64, 13); err != nil {
		return fmt.Errorf("%T write field begin error 13:CreateTime: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.CreateTime)); err != nil {
		return fmt.Errorf("%T.CreateTime (13) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 13:CreateTime: %s", p, err)
	}
	return err
}

func (p *EncodedVideoInfo) writeField14(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("UpdateTime", thrift.I64, 14); err != nil {
		return fmt.Errorf("%T write field begin error 14:UpdateTime: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.UpdateTime)); err != nil {
		return fmt.Errorf("%T.UpdateTime (14) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 14:UpdateTime: %s", p, err)
	}
	return err
}

func (p *EncodedVideoInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EncodedVideoInfo(%+v)", *p)
}

type UploadRecord struct {
	VideoID       string            `thrift:"VideoID,1" json:"VideoID"`
	Provider      string            `thrift:"Provider,2" json:"Provider"`
	UploadInfo    string            `thrift:"UploadInfo,3" json:"UploadInfo"`
	UserReference string            `thrift:"UserReference,4" json:"UserReference"`
	UserAction    string            `thrift:"UserAction,5" json:"UserAction"`
	VideoStatus   string            `thrift:"VideoStatus,6" json:"VideoStatus"`
	Extra         map[string]string `thrift:"Extra,7" json:"Extra"`
}

func NewUploadRecord() *UploadRecord {
	return &UploadRecord{}
}

func (p *UploadRecord) GetVideoID() string {
	return p.VideoID
}

func (p *UploadRecord) GetProvider() string {
	return p.Provider
}

func (p *UploadRecord) GetUploadInfo() string {
	return p.UploadInfo
}

func (p *UploadRecord) GetUserReference() string {
	return p.UserReference
}

func (p *UploadRecord) GetUserAction() string {
	return p.UserAction
}

func (p *UploadRecord) GetVideoStatus() string {
	return p.VideoStatus
}

var UploadRecord_Extra_DEFAULT map[string]string

func (p *UploadRecord) GetExtra() map[string]string {
	return p.Extra
}
func (p *UploadRecord) IsSetExtra() bool {
	return p.Extra != nil
}

func (p *UploadRecord) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *UploadRecord) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.VideoID = v
	}
	return nil
}

func (p *UploadRecord) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Provider = v
	}
	return nil
}

func (p *UploadRecord) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.UploadInfo = v
	}
	return nil
}

func (p *UploadRecord) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.UserReference = v
	}
	return nil
}

func (p *UploadRecord) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.UserAction = v
	}
	return nil
}

func (p *UploadRecord) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.VideoStatus = v
	}
	return nil
}

func (p *UploadRecord) ReadField7(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string]string, size)
	p.Extra = tMap
	for i := 0; i < size; i++ {
		var _key4 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key4 = v
		}
		var _val5 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_val5 = v
		}
		p.Extra[_key4] = _val5
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *UploadRecord) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UploadRecord"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *UploadRecord) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("VideoID", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:VideoID: %s", p, err)
	}
	if err := oprot.WriteString(string(p.VideoID)); err != nil {
		return fmt.Errorf("%T.VideoID (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:VideoID: %s", p, err)
	}
	return err
}

func (p *UploadRecord) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Provider", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:Provider: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Provider)); err != nil {
		return fmt.Errorf("%T.Provider (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:Provider: %s", p, err)
	}
	return err
}

func (p *UploadRecord) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("UploadInfo", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:UploadInfo: %s", p, err)
	}
	if err := oprot.WriteString(string(p.UploadInfo)); err != nil {
		return fmt.Errorf("%T.UploadInfo (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:UploadInfo: %s", p, err)
	}
	return err
}

func (p *UploadRecord) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("UserReference", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:UserReference: %s", p, err)
	}
	if err := oprot.WriteString(string(p.UserReference)); err != nil {
		return fmt.Errorf("%T.UserReference (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:UserReference: %s", p, err)
	}
	return err
}

func (p *UploadRecord) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("UserAction", thrift.STRING, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:UserAction: %s", p, err)
	}
	if err := oprot.WriteString(string(p.UserAction)); err != nil {
		return fmt.Errorf("%T.UserAction (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:UserAction: %s", p, err)
	}
	return err
}

func (p *UploadRecord) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("VideoStatus", thrift.STRING, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:VideoStatus: %s", p, err)
	}
	if err := oprot.WriteString(string(p.VideoStatus)); err != nil {
		return fmt.Errorf("%T.VideoStatus (6) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:VideoStatus: %s", p, err)
	}
	return err
}

func (p *UploadRecord) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetExtra() {
		if err := oprot.WriteFieldBegin("Extra", thrift.MAP, 7); err != nil {
			return fmt.Errorf("%T write field begin error 7:Extra: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
			return fmt.Errorf("error writing map begin: %s", err)
		}
		for k, v := range p.Extra {
			if err := oprot.WriteString(string(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 7:Extra: %s", p, err)
		}
	}
	return err
}

func (p *UploadRecord) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UploadRecord(%+v)", *p)
}

type ProviderInfo struct {
	ProviderName    string `thrift:"ProviderName,1" json:"ProviderName"`
	FileLimit       int64  `thrift:"FileLimit,2" json:"FileLimit"`
	StorageQuota    int64  `thrift:"StorageQuota,3" json:"StorageQuota"`
	CallbackURL     string `thrift:"CallbackURL,4" json:"CallbackURL"`
	UserKey         string `thrift:"UserKey,5" json:"UserKey"`
	WorkFlowName    string `thrift:"WorkFlowName,6" json:"WorkFlowName"`
	WorkFlowVersion string `thrift:"WorkFlowVersion,7" json:"WorkFlowVersion"`
	CdnPreload      bool   `thrift:"CdnPreload,8" json:"CdnPreload"`
	Transcode       bool   `thrift:"Transcode,9" json:"Transcode"`
	GetMeta         bool   `thrift:"GetMeta,10" json:"GetMeta"`
	CoverSnapshot   bool   `thrift:"CoverSnapshot,11" json:"CoverSnapshot"`
}

func NewProviderInfo() *ProviderInfo {
	return &ProviderInfo{}
}

func (p *ProviderInfo) GetProviderName() string {
	return p.ProviderName
}

func (p *ProviderInfo) GetFileLimit() int64 {
	return p.FileLimit
}

func (p *ProviderInfo) GetStorageQuota() int64 {
	return p.StorageQuota
}

func (p *ProviderInfo) GetCallbackURL() string {
	return p.CallbackURL
}

func (p *ProviderInfo) GetUserKey() string {
	return p.UserKey
}

func (p *ProviderInfo) GetWorkFlowName() string {
	return p.WorkFlowName
}

func (p *ProviderInfo) GetWorkFlowVersion() string {
	return p.WorkFlowVersion
}

func (p *ProviderInfo) GetCdnPreload() bool {
	return p.CdnPreload
}

func (p *ProviderInfo) GetTranscode() bool {
	return p.Transcode
}

func (p *ProviderInfo) GetGetMeta() bool {
	return p.GetMeta
}

func (p *ProviderInfo) GetCoverSnapshot() bool {
	return p.CoverSnapshot
}
func (p *ProviderInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.ReadField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.ReadField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.ReadField11(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ProviderInfo) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.ProviderName = v
	}
	return nil
}

func (p *ProviderInfo) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.FileLimit = v
	}
	return nil
}

func (p *ProviderInfo) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.StorageQuota = v
	}
	return nil
}

func (p *ProviderInfo) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.CallbackURL = v
	}
	return nil
}

func (p *ProviderInfo) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.UserKey = v
	}
	return nil
}

func (p *ProviderInfo) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.WorkFlowName = v
	}
	return nil
}

func (p *ProviderInfo) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 7: %s", err)
	} else {
		p.WorkFlowVersion = v
	}
	return nil
}

func (p *ProviderInfo) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 8: %s", err)
	} else {
		p.CdnPreload = v
	}
	return nil
}

func (p *ProviderInfo) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 9: %s", err)
	} else {
		p.Transcode = v
	}
	return nil
}

func (p *ProviderInfo) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 10: %s", err)
	} else {
		p.GetMeta = v
	}
	return nil
}

func (p *ProviderInfo) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 11: %s", err)
	} else {
		p.CoverSnapshot = v
	}
	return nil
}

func (p *ProviderInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ProviderInfo"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ProviderInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ProviderName", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:ProviderName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ProviderName)); err != nil {
		return fmt.Errorf("%T.ProviderName (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:ProviderName: %s", p, err)
	}
	return err
}

func (p *ProviderInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("FileLimit", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:FileLimit: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.FileLimit)); err != nil {
		return fmt.Errorf("%T.FileLimit (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:FileLimit: %s", p, err)
	}
	return err
}

func (p *ProviderInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("StorageQuota", thrift.I64, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:StorageQuota: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.StorageQuota)); err != nil {
		return fmt.Errorf("%T.StorageQuota (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:StorageQuota: %s", p, err)
	}
	return err
}

func (p *ProviderInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("CallbackURL", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:CallbackURL: %s", p, err)
	}
	if err := oprot.WriteString(string(p.CallbackURL)); err != nil {
		return fmt.Errorf("%T.CallbackURL (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:CallbackURL: %s", p, err)
	}
	return err
}

func (p *ProviderInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("UserKey", thrift.STRING, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:UserKey: %s", p, err)
	}
	if err := oprot.WriteString(string(p.UserKey)); err != nil {
		return fmt.Errorf("%T.UserKey (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:UserKey: %s", p, err)
	}
	return err
}

func (p *ProviderInfo) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("WorkFlowName", thrift.STRING, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:WorkFlowName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.WorkFlowName)); err != nil {
		return fmt.Errorf("%T.WorkFlowName (6) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:WorkFlowName: %s", p, err)
	}
	return err
}

func (p *ProviderInfo) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("WorkFlowVersion", thrift.STRING, 7); err != nil {
		return fmt.Errorf("%T write field begin error 7:WorkFlowVersion: %s", p, err)
	}
	if err := oprot.WriteString(string(p.WorkFlowVersion)); err != nil {
		return fmt.Errorf("%T.WorkFlowVersion (7) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 7:WorkFlowVersion: %s", p, err)
	}
	return err
}

func (p *ProviderInfo) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("CdnPreload", thrift.BOOL, 8); err != nil {
		return fmt.Errorf("%T write field begin error 8:CdnPreload: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.CdnPreload)); err != nil {
		return fmt.Errorf("%T.CdnPreload (8) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 8:CdnPreload: %s", p, err)
	}
	return err
}

func (p *ProviderInfo) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Transcode", thrift.BOOL, 9); err != nil {
		return fmt.Errorf("%T write field begin error 9:Transcode: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.Transcode)); err != nil {
		return fmt.Errorf("%T.Transcode (9) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 9:Transcode: %s", p, err)
	}
	return err
}

func (p *ProviderInfo) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("GetMeta", thrift.BOOL, 10); err != nil {
		return fmt.Errorf("%T write field begin error 10:GetMeta: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.GetMeta)); err != nil {
		return fmt.Errorf("%T.GetMeta (10) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 10:GetMeta: %s", p, err)
	}
	return err
}

func (p *ProviderInfo) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("CoverSnapshot", thrift.BOOL, 11); err != nil {
		return fmt.Errorf("%T write field begin error 11:CoverSnapshot: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.CoverSnapshot)); err != nil {
		return fmt.Errorf("%T.CoverSnapshot (11) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 11:CoverSnapshot: %s", p, err)
	}
	return err
}

func (p *ProviderInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ProviderInfo(%+v)", *p)
}

type PosterCandidate struct {
	VideoID string   `thrift:"VideoID,1" json:"VideoID"`
	Width   int64    `thrift:"Width,2" json:"Width"`
	Height  int64    `thrift:"Height,3" json:"Height"`
	URI     string   `thrift:"URI,4" json:"URI"`
	SrcURI  *string  `thrift:"SrcURI,5" json:"SrcURI"`
	Offset  *float64 `thrift:"Offset,6" json:"Offset"`
	Score   *float64 `thrift:"Score,7" json:"Score"`
}

func NewPosterCandidate() *PosterCandidate {
	return &PosterCandidate{}
}

func (p *PosterCandidate) GetVideoID() string {
	return p.VideoID
}

func (p *PosterCandidate) GetWidth() int64 {
	return p.Width
}

func (p *PosterCandidate) GetHeight() int64 {
	return p.Height
}

func (p *PosterCandidate) GetURI() string {
	return p.URI
}

var PosterCandidate_SrcURI_DEFAULT string

func (p *PosterCandidate) GetSrcURI() string {
	if !p.IsSetSrcURI() {
		return PosterCandidate_SrcURI_DEFAULT
	}
	return *p.SrcURI
}

var PosterCandidate_Offset_DEFAULT float64

func (p *PosterCandidate) GetOffset() float64 {
	if !p.IsSetOffset() {
		return PosterCandidate_Offset_DEFAULT
	}
	return *p.Offset
}

var PosterCandidate_Score_DEFAULT float64

func (p *PosterCandidate) GetScore() float64 {
	if !p.IsSetScore() {
		return PosterCandidate_Score_DEFAULT
	}
	return *p.Score
}
func (p *PosterCandidate) IsSetSrcURI() bool {
	return p.SrcURI != nil
}

func (p *PosterCandidate) IsSetOffset() bool {
	return p.Offset != nil
}

func (p *PosterCandidate) IsSetScore() bool {
	return p.Score != nil
}

func (p *PosterCandidate) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *PosterCandidate) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.VideoID = v
	}
	return nil
}

func (p *PosterCandidate) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Width = v
	}
	return nil
}

func (p *PosterCandidate) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Height = v
	}
	return nil
}

func (p *PosterCandidate) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.URI = v
	}
	return nil
}

func (p *PosterCandidate) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.SrcURI = &v
	}
	return nil
}

func (p *PosterCandidate) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.Offset = &v
	}
	return nil
}

func (p *PosterCandidate) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return fmt.Errorf("error reading field 7: %s", err)
	} else {
		p.Score = &v
	}
	return nil
}

func (p *PosterCandidate) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("PosterCandidate"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *PosterCandidate) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("VideoID", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:VideoID: %s", p, err)
	}
	if err := oprot.WriteString(string(p.VideoID)); err != nil {
		return fmt.Errorf("%T.VideoID (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:VideoID: %s", p, err)
	}
	return err
}

func (p *PosterCandidate) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Width", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:Width: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Width)); err != nil {
		return fmt.Errorf("%T.Width (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:Width: %s", p, err)
	}
	return err
}

func (p *PosterCandidate) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Height", thrift.I64, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:Height: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Height)); err != nil {
		return fmt.Errorf("%T.Height (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:Height: %s", p, err)
	}
	return err
}

func (p *PosterCandidate) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("URI", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:URI: %s", p, err)
	}
	if err := oprot.WriteString(string(p.URI)); err != nil {
		return fmt.Errorf("%T.URI (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:URI: %s", p, err)
	}
	return err
}

func (p *PosterCandidate) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetSrcURI() {
		if err := oprot.WriteFieldBegin("SrcURI", thrift.STRING, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:SrcURI: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.SrcURI)); err != nil {
			return fmt.Errorf("%T.SrcURI (5) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:SrcURI: %s", p, err)
		}
	}
	return err
}

func (p *PosterCandidate) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetOffset() {
		if err := oprot.WriteFieldBegin("Offset", thrift.DOUBLE, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:Offset: %s", p, err)
		}
		if err := oprot.WriteDouble(float64(*p.Offset)); err != nil {
			return fmt.Errorf("%T.Offset (6) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:Offset: %s", p, err)
		}
	}
	return err
}

func (p *PosterCandidate) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetScore() {
		if err := oprot.WriteFieldBegin("Score", thrift.DOUBLE, 7); err != nil {
			return fmt.Errorf("%T write field begin error 7:Score: %s", p, err)
		}
		if err := oprot.WriteDouble(float64(*p.Score)); err != nil {
			return fmt.Errorf("%T.Score (7) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 7:Score: %s", p, err)
		}
	}
	return err
}

func (p *PosterCandidate) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PosterCandidate(%+v)", *p)
}

type VideoStoreInfo struct {
	VideoID  string `thrift:"VideoID,1" json:"VideoID"`
	StoreURI string `thrift:"StoreURI,2" json:"StoreURI"`
}

func NewVideoStoreInfo() *VideoStoreInfo {
	return &VideoStoreInfo{}
}

func (p *VideoStoreInfo) GetVideoID() string {
	return p.VideoID
}

func (p *VideoStoreInfo) GetStoreURI() string {
	return p.StoreURI
}
func (p *VideoStoreInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *VideoStoreInfo) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.VideoID = v
	}
	return nil
}

func (p *VideoStoreInfo) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.StoreURI = v
	}
	return nil
}

func (p *VideoStoreInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("VideoStoreInfo"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *VideoStoreInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("VideoID", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:VideoID: %s", p, err)
	}
	if err := oprot.WriteString(string(p.VideoID)); err != nil {
		return fmt.Errorf("%T.VideoID (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:VideoID: %s", p, err)
	}
	return err
}

func (p *VideoStoreInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("StoreURI", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:StoreURI: %s", p, err)
	}
	if err := oprot.WriteString(string(p.StoreURI)); err != nil {
		return fmt.Errorf("%T.StoreURI (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:StoreURI: %s", p, err)
	}
	return err
}

func (p *VideoStoreInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoStoreInfo(%+v)", *p)
}
